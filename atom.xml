<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PleaseCallMeCoder</title>
  <subtitle>每个人都在成神的路上，只不过有的人在走，而有的人在跑。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-05-17T02:03:25.704Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>任磊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>方法论-成为大神路上的捷径</title>
    <link href="http://yoursite.com/2016/05/17/%E6%96%B9%E6%B3%95%E8%AE%BA-%E6%88%90%E4%B8%BA%E5%A4%A7%E7%A5%9E%E8%B7%AF%E4%B8%8A%E7%9A%84%E6%8D%B7%E5%BE%84/"/>
    <id>http://yoursite.com/2016/05/17/方法论-成为大神路上的捷径/</id>
    <published>2016-05-17T01:21:00.000Z</published>
    <updated>2016-05-17T02:03:25.704Z</updated>
    
    <content type="html">&lt;p&gt;跟大家分享一下成为大神路上的捷径，与诸君共勉。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/PxCfAEr.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;每个人都在成为大神的路上，只不过有的人在走，而有的人在跑。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;#写在前面的话&lt;/p&gt;
&lt;p&gt;在开始正文之前我先跟大家分享一个我身边的例子。我有两个朋友，A和B。B从高一开始打dota，A从高二开始，到高中毕业的时候，A已经是一个2100分的大神级别的人物，而B只有1200分而已。为什么A打的时间比B短，而水平却比B高呢？是天赋？是智商？似乎都不是。&lt;/p&gt;
&lt;p&gt;我对两个人还是比较了解的，虽然同样是打dota，但是A和B之间有着很大差别的。A除了像B一样打dota之外，会看一些成名已久的大神的教学视频，会看自己打dota的录像然后反思，会逛贴吧学习一些新的打法以及连招，会不断练习自己做得不好的地方。然后A成了大神，而B依然是一只菜鸟。&lt;/p&gt;
&lt;p&gt;其实成为大神的路上，真的有一些捷径，不论是打dota、销售，还是开发。&lt;/p&gt;
&lt;p&gt;#自我定位以及目标&lt;/p&gt;
&lt;p&gt;“我是蒙奇·D·路飞，要成为海贼王的男人。”草帽同学的这句话既霸气又充满哲理。假如现在的你是一个小菜鸟，但你想要成为宇宙无敌超级工程师，那么你需要一个目标：我是要成为超级工程师的男人（妹子）。当你从心底有了这个目标之后，你的每天都会有一种充实感，虽然哥现在很菜，但过一阵子哥可就是大神了。强大先从精神开始。&lt;/p&gt;
&lt;p&gt;#经验与成就&lt;/p&gt;
&lt;p&gt;为什么有的人工作5年，仍然不是专家，而有的人只用2年时间，表现足够卓越？&lt;/p&gt;
&lt;p&gt;心理学家 Ericsson 的研究发现：&lt;strong&gt;决定伟大水平和一般水平的关键因素，既不是天赋，也不是经验，而是[刻意练习]的程度。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我坚信重复是通向精通的必由之路。任何一种技能（包括码代码），只要经过连续不断地磨练和改进，最终效果都将变得异常惊人。&lt;/p&gt;
&lt;p&gt;之前也和朋友讨论过一个问题，近几年培训的人越来越多，就业压力相对来说越来越大，很多人会出现恐慌的情绪。但如果你真的足够优秀，那么这种问题其实都不是问题。&lt;/p&gt;
&lt;p&gt;#学好英语&lt;/p&gt;
&lt;p&gt;根据HOPL编程语言在线数据库的统计，全球有8500种以上的编程语言，大概2400种起源于美国，600种是在英国发展起来的，160种是来自加拿大的，75种是在澳大利亚发展起来的。换句话说，世界上三分之一以上的编程语言是在以英语为母语的国家发展起来的。&lt;/p&gt;
&lt;p&gt;就Android开发者来说，&lt;strong&gt;通读官方文档和training都是很有必要的&lt;/strong&gt;。so，好好学习英语吧。&lt;/p&gt;
&lt;p&gt;#找到成就感&lt;/p&gt;
&lt;p&gt;我实习的时候，我的经理告诉我，&lt;strong&gt;如果你从你的工作中找不到成就感，那么你可以考虑转行了。&lt;/strong&gt;对于码代码，在你眼里无论这是一份工作、事业或者志业，都可以赋予其意义。有了意义就会有成就感，它会成为一种精神力量和内在动力，与工作形成一个良好的循环。譬如写博客，如果没有成就感，或许小哥我早放弃了。&lt;/p&gt;
&lt;p&gt;#点满技能点&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果你不知道该学点什么，去招聘网站翻翻简历吧。&lt;/strong&gt;在你所在的领域里，总会有你不熟悉的技能，找到它，干掉它。&lt;strong&gt;如果你的技能点是满的，那就发散思维，学习一些进阶技能和相关的其他方面的技能点&lt;/strong&gt;，其实开发远比想象的要复杂。&lt;/p&gt;
&lt;p&gt;#好的身体是革命的本钱&lt;/p&gt;
&lt;p&gt;长时间坐在电脑前会伤害你的身体，如果不能减少工作时间，那就尽量保持正确的坐姿，如果有条件的话，换个站立办公桌也是不错的选择。选择一个适合自己的锻炼方案，相信我，当你老了，你会庆幸自己能坚持锻炼。&lt;/p&gt;
&lt;p&gt;#拖延症、计划和时间管理&lt;/p&gt;
&lt;p&gt;拖延症是指自我调节失败，在能够预料后果有害的情况下，仍然把计划要做的事情往后推迟的一种行为。这是一种普遍现象，博主上大学的时候写论文，每次都是在最后一天的最后一两个小时搞完，论文质量简直惨不忍睹。&lt;/p&gt;
&lt;p&gt;我们的人性啊！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;合理的计划可以有效的解决拖延症的问题&lt;/strong&gt;，每周给自己一个计划，坚持完成，想不成为大神都难。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;学会管理自己的时间，让效率飞起来。&lt;/strong&gt;关于这方面大家可以看下《暗时间》和番茄工作法。&lt;/p&gt;
&lt;p&gt;#知其然与其所以然&lt;/p&gt;
&lt;p&gt;这点很重要，这点很重要，这点很重要，重要的话要说三遍。&lt;/p&gt;
&lt;p&gt;对于这点最深的感触是实习的时候经理提的一点要求：&lt;strong&gt;做任何事，先要想明白，再能给别人讲明白，然后再去执行。&lt;/strong&gt;所以那会我们在做开发之前先要跟他汇报，给他讲明白，然后才能开发。优点也很明显，这样下来bug比之前少很多。&lt;/p&gt;
&lt;p&gt;在这顺便&lt;strong&gt;建议一下大家写博客，做完东西整理思路总结一下，然后分享给大家，加深理解的同时还能获得成就感，一举多得。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;#我是这样解决问题的&lt;/p&gt;
&lt;p&gt;首先&lt;strong&gt;遇到问题不要怕，要知道这个世界上那么多前辈，你所遇到的大部分问题，之前肯定有人遇到过并且已经解决，要学会使用google。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其次，这里有一条准则与大家共勉：&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;WHAT，WHEN，WHY，HOW。

它是什么？它在什么场景下发生？它为什么会是这样，有没有其他原因？它是怎么做到的？
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果你觉得自己处理信息的能力又比较弱，不妨这样试试。做任何事情之前，有意识的让自己来一遍what, when, why, how。&lt;/p&gt;
&lt;p&gt;时间久了，你会发现逻辑变得严谨，不会钻牛角尖了，工作变得轻松，debug也不头痛了。&lt;/p&gt;
&lt;p&gt;#与时消息、与时谐行、与时俱进&lt;/p&gt;
&lt;p&gt;每天抽出半个小时左右的时间阅读一些领域内的博客, 理解目前的技术发展方向, 与时代同步, 让技术历久弥新。这里分享下我每天必看的&lt;a href=&quot;https://github.com/PleaseCallMeCoder/Topia/blob/master/treasure/recommend.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;博客或者网站&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;#代码评审（code review）&lt;/p&gt;
&lt;p&gt;大多数程序员都有一个错觉：手头上的项目永远是最烂的。如果你也是这么认为，那么尝试去改变它吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码评审（code review）是一个用来提高程序员的极好的方法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;#开源项目&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;阅读流行的开源项目，是学习编写可维护代码和软件开发流程的好方法。&lt;/strong&gt;比如最近流行的google出品的&lt;a href=&quot;https://github.com/googlesamples/android-architecture&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MVP模式demo&lt;/a&gt;，&lt;a href=&quot;https://github.com/greenrobot/EventBus&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EventBus&lt;/a&gt;,&lt;a href=&quot;https://github.com/square/picasso&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Picasso&lt;/a&gt;等等。&lt;/p&gt;
&lt;p&gt;#结语&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;做一个行动派。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;世界上最遥远的距离是在想到和做到之间。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果只是看清了一些事情而不去改变它，那又有什么意义呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关注博主是一种态度，评论博主是一种欣赏！！&lt;/p&gt;
&lt;p&gt;最后，欢迎大家关注我的微信公众号：CoderTopia。&lt;/p&gt;
&lt;center&gt;&lt;img style=&quot;width:150px; height:150px&quot; src=&quot;http://img.blog.csdn.net/20160422143030784&quot;&gt;&lt;/center&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;跟大家分享一下成为大神路上的捷径，与诸君共勉。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="学习方法" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="方法论，Android，学习方法" scheme="http://yoursite.com/tags/%E6%96%B9%E6%B3%95%E8%AE%BA%EF%BC%8CAndroid%EF%BC%8C%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>TextView实战之你真的懂我么？</title>
    <link href="http://yoursite.com/2016/05/04/TextView%E5%AE%9E%E6%88%98%E4%B9%8B%E4%BD%A0%E7%9C%9F%E7%9A%84%E6%87%82%E6%88%91%E4%B9%88%EF%BC%9F/"/>
    <id>http://yoursite.com/2016/05/04/TextView实战之你真的懂我么？/</id>
    <published>2016-05-04T10:40:00.000Z</published>
    <updated>2016-05-06T13:51:49.686Z</updated>
    
    <content type="html">&lt;p&gt;对于TextView,我想大家都已经熟的不能再熟了。但是它的用法我们真的熟么？为了避免总是一言不合就去翻官方文档，在这里我总结一下我也可能是你容易忽视的一些细节。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/j1Knx9T.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不要以为别人是赢在了起跑线上，他们其实生在了终点。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;#写在前面的话&lt;/p&gt;
&lt;p&gt;对于TextView,我想大家都已经熟的不能再熟了。但是它的用法我们真的熟么？为了避免总是一言不合就去翻官方文档，在这里我总结一下我也可能是你容易忽视的一些细节.&lt;/p&gt;
&lt;p&gt;#TextView设置基础&lt;/p&gt;
&lt;p&gt;##字符串资源里变量替换&lt;/p&gt;
&lt;p&gt;Android开发中是拒绝硬编码的，我们可能会把一些字符串放在xml中当作资源使用，假设有如下情况：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;string name=&amp;quot;welcome&amp;quot;&amp;gt;你好A，欢迎使用我们的App。&amp;lt;/string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们在程序中需要使用这个字符串，但是A是一个变量，很常规的办法是取出这个字符串，然后用String的replace方法把A替换成用户的昵称。&lt;/p&gt;
&lt;p&gt;其实，在android中有这样一个东西，那就是 XLIFF，全称叫 XML &lt;strong&gt;本地化数据交换格式&lt;/strong&gt;，英文全称 XML Localization Interchange File Format。&lt;/p&gt;
&lt;p&gt;用法也是很简单的，如&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;string name=&amp;quot;welcome&amp;quot;&amp;gt;你好%1$s，欢迎使用我们的App。&amp;lt;/string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;程序中只要给变量赋值就可以了，如&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;String welcome = getString(R.string.welcome, &amp;quot;小丸子&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;把字符串打印出来如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/0Aho7n7.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里的1代表第一个变量，多个变量的话依次递增即可。&lt;/p&gt;
&lt;p&gt;##TextView xml文件可配置的属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;android:autoLink    设置是否当文本为URL链接/email/电话号码/map时，文本显示为可点击的链接。可选值(none/web/email/phone/map/all)  
android:autoText    如果设置，将自动执行输入值的拼写纠正。此处无效果，在显示输入法并输入的时候起作用。  
android:bufferType  指定getText()方式取得的文本类别。选项editable 类似于StringBuilder可追加字符，  
也就是说getText后可调用append方法设置文本内容。spannable 则可在给定的字符区域使用样式，参见这里1、这里2。  

android:capitalize  设置英文字母大写类型。此处无效果，需要弹出输入法才能看得到，参见EditView此属性说明。  
android:cursorVisible   设定光标为显示/隐藏，默认显示。  
android:digits  设置允许输入哪些字符。如“1234567890.+-*/%\n()”  
android:drawableBottom  在text的下方输出一个drawable，如图片。如果指定一个颜色的话会把text的背景设为该颜色，并且同时和background使用时覆盖后者。  
android:drawableLeft    在text的左边输出一个drawable，如图片。  
android:drawablePadding 设置text与drawable(图片)的间隔，与drawableLeft、drawableRight、drawableTop、drawableBottom一起使用，可设置为负数，单独使用没有效果。  
android:drawableRight   在text的右边输出一个drawable，如图片。  
android:drawableTop 在text的正上方输出一个drawable，如图片。  
android:editable    设置是否可编辑。这里无效果，参见EditView。  
android:editorExtras    设置文本的额外的输入数据。在EditView再讨论。  
android:ellipsize   设置当文字过长时,该控件该如何显示。有如下值设置：”start”—–省略号显示在开头；”end”——省略号显示在结尾；”middle”—-省略号显示在中间；”marquee” ——以跑马灯的方式显示(动画横向移动)  

android:freezesText 设置保存文本的内容以及光标的位置。参见：这里。  

android:gravity 设置文本位置，如设置成“center”，文本将居中显示。  
android:hint    Text为空时显示的文字提示信息，可通过textColorHint设置提示信息的颜色。此属性在EditView中使用，但是这里也可以用。  
android:imeOptions  附加功能，设置右下角IME动作与编辑框相关的动作，如actionDone右下角将显示一个“完成”，而不设置默认是一个回车符号。这个在EditView中再详细说明，此处无用。  
android:imeActionId 设置IME动作ID。在EditView再做说明，可以先看这篇帖子：这里。  

android:imeActionLabel  设置IME动作标签。在EditView再做说明。  
android:includeFontPadding  设置文本是否包含顶部和底部额外空白，默认为true。  
android:inputMethod 为文本指定输入法，需要完全限定名（完整的包名）。例如：com.google.android.inputmethod.pinyin，但是这里报错找不到。  
android:inputType   设置文本的类型，用于帮助输入法显示合适的键盘类型。在EditView中再详细说明，这里无效果。  
android:marqueeRepeatLimit  在ellipsize指定marquee的情况下，设置重复滚动的次数，当设置为marquee_forever时表示无限次。  
android:ems 设置TextView的宽度为N个字符的宽度。这里测试为一个汉字字符宽度，如图：   
android:maxEms  设置TextView的宽度为最长为N个字符的宽度。与ems同时使用时覆盖ems选项。  
android:minEms  设置TextView的宽度为最短为N个字符的宽度。与ems同时使用时覆盖ems选项。  
android:maxLength   限制显示的文本长度，超出部分不显示。  
android:lines   设置文本的行数，设置两行就显示两行，即使第二行没有数据。  
android:maxLines    设置文本的最大显示行数，与width或者layout_width结合使用，超出部分自动换行，超出行数将不显示。  
android:minLines    设置文本的最小行数，与lines类似。  
android:linksClickable  设置链接是否点击连接，即使设置了autoLink。  
android:lineSpacingExtra    设置行间距。  
android:lineSpacingMultiplier   设置行间距的倍数。如”1.2”  
android:numeric 如果被设置，该TextView有一个数字输入法。此处无用，设置后唯一效果是TextView有点击效果，此属性在EdtiView将详细说明。  
android:password    以小点”.”显示文本  
android:phoneNumber 设置为电话号码的输入方式。  
android:privateImeOptions   设置输入法选项，此处无用，在EditText将进一步讨论。  
android:scrollHorizontally  设置文本超出TextView的宽度的情况下，是否出现横拉条。  
android:selectAllOnFocus    如果文本是可选择的，让他获取焦点而不是将光标移动为文本的开始位置或者末尾位置。TextView中设置后无效果。  
android:shadowColor 指定文本阴影的颜色，需要与shadowRadius一起使用。效果：    
android:shadowDx    设置阴影横向坐标开始位置。  
android:shadowDy    设置阴影纵向坐标开始位置。  
android:shadowRadius    设置阴影的半径。设置为0.1就变成字体的颜色了，一般设置为3.0的效果比较好。  
android:singleLine  设置单行显示。如果和layout_width一起使用，当文本不能全部显示时，后面用“…”来表示。如android:text=&amp;quot;test_ singleLine &amp;quot; android:singleLine=&amp;quot;true&amp;quot; android:layout_width=&amp;quot;20dp&amp;quot;将只显示“t…”。如果不设置singleLine或者设置为false，文本将自动换行  
android:text    设置显示文本.  
android:textAppearance  设置文字外观。如“?android:attr/textAppearanceLargeInverse  
”这里引用的是系统自带的一个外观，？表示系统是否有这种外观，否则使用默认的外观。可设置的值如下：textAppearanceButton/textAppearanceInverse/textAppearanceLarge/textAppearanceLargeInverse/textAppearanceMedium/textAppearanceMediumInverse/textAppearanceSmall/textAppearanceSmallInverse  
android:textColor   设置文本颜色  
android:textColorHighlight  被选中文字的底色，默认为蓝色  
android:textColorHint   设置提示信息文字的颜色，默认为灰色。与hint一起使用。  
android:textColorLink   文字链接的颜色.  
android:textScaleX  设置文字之间间隔，默认为1.0f。分别设置0.5f/1.0f/1.5f/2.0f效果如下：  

android:textSize    设置文字大小，推荐度量单位”sp”，如”15sp”  
android:textStyle   设置字形[bold(粗体) 0, italic(斜体) 1, bolditalic(又粗又斜) 2] 可以设置一个或多个，用“|”隔开  
android:typeface    设置文本字体，必须是以下常量值之一：normal 0, sans 1, serif 2, monospace(等宽字体) 3]   
android:height  设置文本区域的高度，支持度量单位：px(像素)/dp/sp/in/mm(毫米)  
android:maxHeight   设置文本区域的最大高度  
android:minHeight   设置文本区域的最小高度  
android:width   设置文本区域的宽度，支持度量单位：px(像素)/dp/sp/in/mm(毫米)，与layout_width的区别看这里。  

android:maxWidth    设置文本区域的最大宽度  
android:minWidth    设置文本区域的最小宽度  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;##TextView中设置多种字体大小&lt;/p&gt;
&lt;p&gt;比如在项目中经常遇到如下UI，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/TmmIXah.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;像这样的两种字体大小放到一个TextView中，我们应该如何处理呢？需要用到 android.text 命名空间下的一些与 &lt;a href=&quot;http://developer.android.com/reference/android/text/Spannable.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;spannable&lt;/a&gt;相关的类和接口。如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;String text = &amp;quot;您已经连续走了5963步&amp;quot;;
int start = text.indexOf(&amp;apos;5&amp;apos;);
int end = text.length();
Spannable textSpan = new SpannableStringBuilder(text);
textSpan.setSpan(new AbsoluteSizeSpan(16), 0, start, Spannable.SPAN_INCLUSIVE_INCLUSIVE);
textSpan.setSpan(new AbsoluteSizeSpan(26), start, end - 1, Spannable.SPAN_INCLUSIVE_INCLUSIVE);
textSpan.setSpan(new AbsoluteSizeSpan(16), end - 1, end, Spannable.SPAN_INCLUSIVE_INCLUSIVE);
TextView textView = (TextView) findViewById(R.id.text);
textView.setText(textSpan);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个经过转化过的textSpan就是我们需要的。&lt;/p&gt;
&lt;p&gt;##TextView中设置超链接&lt;/p&gt;
&lt;p&gt;这个比较简单，设置我们上边提到的android:autoLink属性，默认为none。该属性的几个常量如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/2qx3b5t.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;代码中的设置方式：setAutoLinkMask(int)。&lt;/p&gt;
&lt;p&gt;参数和上边列表对应，分别为：Linkify.WEB_URLS，Linkify.EMAIL_ADDRESSES，Linkify.PHONE_NUMBERS，Linkify.MAP_ADDRESSES，Linkify.ALL&lt;/p&gt;
&lt;p&gt;但是需要注意的是，当我们需要&lt;strong&gt;定制超链接的跳转&lt;/strong&gt;时应该怎么做？答案是还是选择Spannable。代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//将TextView的显示文字设置为SpannableString
testText.setText(getClickableSpan());
//设置该句使文本的超连接起作用
testText.setMovementMethod(LinkMovementMethod.getInstance());

//设置超链接文字
private SpannableString getClickableSpan() {
    SpannableString spanStr = new SpannableString(&amp;quot;使用该软件，即表示您同意该软件的使用条款和隐私政策&amp;quot;);
    //设置下划线文字
    spanStr.setSpan(new UnderlineSpan(), 16, 20, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    //设置文字的单击事件
    spanStr.setSpan(new ClickableSpan() {
        @Override
        public void onClick(View widget) {
            startActivity(new Intent(MainActivity.this, UsageActivity.class));
        }
    }, 16, 20, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    //设置文字的前景色
    spanStr.setSpan(new ForegroundColorSpan(Color.GREEN), 16, 20, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);

    //设置下划线文字
    spanStr.setSpan(new UnderlineSpan(), 21, 25, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    //设置文字的单击事件
    spanStr.setSpan(new ClickableSpan() {
        @Override
        public void onClick(View widget) {
            startActivity(new Intent(MainActivity.this, PrivacyActivity.class));
        }
    }, 21, 25, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    //设置文字的前景色
    spanStr.setSpan(new ForegroundColorSpan(Color.GREEN), 21, 25, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);

    return spanStr;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行效果如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/4zFQKCI.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;##插入图片&lt;/p&gt;
&lt;p&gt;Android中可以使用TextView的drawableXXX属性在文字周围插入图片。图片和文字之间的间距可以通过android:drawablePadding来设置。&lt;/p&gt;
&lt;p&gt;xml中属性为:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;android:drawableLeft
android:drawableTop
android:drawableRight
android:drawableBottom
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;代码中的设置方式：setCompoundDrawablesWithIntrinsicBounds(int left, int top, int right, int bottom)。&lt;/p&gt;
&lt;p&gt;left，top等需传入资源id，不需要的话传0.&lt;/p&gt;
&lt;p&gt;##阴影&lt;/p&gt;
&lt;p&gt;Android中设置阴影也比较简单，xml中可以这样设置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;android:shadowColor //指定文本阴影的颜色
android:shadowDx //设置阴影横向坐标开始位置
android:shadowDy //设置阴影纵向坐标开始位置
android:shadowRadius //设置阴影的半径。设置为0.1会变成字体的颜色
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;代码中通过方法public void setShadowLayer (float radius, float dx, float dy, int color)来设置。&lt;/p&gt;
&lt;p&gt;我的参数是这样的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;android:shadowColor=&amp;quot;#ffffff&amp;quot;
android:shadowDx=&amp;quot;15.0&amp;quot;
android:shadowDy=&amp;quot;5.0&amp;quot;
android:shadowRadius=&amp;quot;2.5&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/2P3F5Ll.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;##字体加粗或者倾斜&lt;/p&gt;
&lt;p&gt;在xml布局文件中使用android:textStyle=”bold”可以将文字设置成粗体。在代码中设置的方法是：使用TextPaint的仿“粗体”设置setFakeBoldText为true。示例代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tv.getPaint().setFakeBoldText(true);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;textstyle可设置的属性有：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/gfTStsK.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;italic为倾斜，多属性可用”|”分开。&lt;/p&gt;
&lt;p&gt;##文字过长显示省略号或者跑马灯效果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;android:maxEms=&amp;quot;6&amp;quot; //限制显示的字符长度

android:singleLine=&amp;quot;true&amp;quot; //单行显示

android:ellipsize=&amp;quot;end&amp;quot;//在结尾用省略号
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;android:ellipsize设置当文字过长时,该控件该如何显示。有如下值设置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;”start”—–省略号显示在开头；&lt;/li&gt;
&lt;li&gt;”end”——省略号显示在结尾；&lt;/li&gt;
&lt;li&gt;”middle”—-省略号显示在中间；&lt;/li&gt;
&lt;li&gt;”marquee” ——以跑马灯的方式显示(动画横向移动)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;android:marqueeRepeatLimit 在ellipsize指定marquee的情况下，设置重复滚动的次数，当设置为marquee_forever时表示无限次。实现需要控件获得焦点。&lt;/p&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;android:marqueeRepeatLimit=&amp;quot;marquee_forever&amp;quot;
android:ellipsize=&amp;quot;marquee&amp;quot;
android:singleLine=&amp;quot;true&amp;quot;
android:focusableInTouchMode=&amp;quot;true&amp;quot;
android:focusable=&amp;quot;true&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/lqd62Ox.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;##设置行间距&lt;/p&gt;
&lt;p&gt;1、android:lineSpacingExtra&lt;br&gt;   设置行间距，如”3dp”。&lt;/p&gt;
&lt;p&gt;2、android:lineSpacingMultiplier&lt;br&gt;   设置行间距的倍数，如”1.2″。&lt;/p&gt;
&lt;p&gt;##关于字体&lt;/p&gt;
&lt;p&gt;我们可以通过设置android:typeface属性来控制字体，可以设置为normal, sans, serif, monospace四种。具体如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/5CrEoYl.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;代码中可以通过setTypeface(Typeface)方法设置。但有时候我们的App可能需要使用特殊的字体，这时候怎么办呢？可以通过如下代码设置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Typeface mTypeFace = Typeface.createFromAsset(getAssets(), &amp;quot;kaiti.ttf&amp;quot;);
textview.setTypeface(mTypeFace);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后将我们的字体文件放到assets文件夹下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是需要注意的是，不要大量使用这种自定义字体，因为自定义字体会消耗更多的性能。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;#TextView中设置Html&lt;/p&gt;
&lt;p&gt;##TextView支持的Html标签&lt;/p&gt;
&lt;p&gt;Textview只支持部分的html标签。具体如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;...&amp;quot;&amp;gt;  //定义链接内容
&amp;lt;b&amp;gt; //定义粗体文字   b 是blod的缩写
&amp;lt;big&amp;gt; //定义大字体的文字
&amp;lt;blockquote&amp;gt; //引用块标签 
&amp;lt;br&amp;gt; //定义换行
&amp;lt;cite&amp;gt; //表示引用的URI
&amp;lt;dfn&amp;gt; //定义标签  dfn 是defining instance的缩写
&amp;lt;div align=&amp;quot;...&amp;quot;&amp;gt;
&amp;lt;em&amp;gt; //强调标签  em 是emphasis的缩写
&amp;lt;font size=&amp;quot;...&amp;quot; color=&amp;quot;...&amp;quot; face=&amp;quot;...&amp;quot;&amp;gt;
&amp;lt;h1&amp;gt;
&amp;lt;h2&amp;gt;
&amp;lt;h3&amp;gt;
&amp;lt;h4&amp;gt;
&amp;lt;h5&amp;gt;
&amp;lt;h6&amp;gt;
&amp;lt;i&amp;gt; //定义斜体文字
&amp;lt;img src=&amp;quot;...&amp;quot;&amp;gt;
&amp;lt;p&amp;gt; // 段落标签,里面可以加入文字,列表,表格等
&amp;lt;small&amp;gt; //定义小字体的文字
&amp;lt;strike&amp;gt; // 定义删除线样式的文字   不符合标准网页设计的理念,不赞成使用.   strike是strikethrough的缩写
&amp;lt;strong&amp;gt; //重点强调标签
&amp;lt;sub&amp;gt; //下标标签   sub 是subscript的缩写
&amp;lt;sup&amp;gt; //上标标签   sup 是superscript的缩写
&amp;lt;tt&amp;gt; //定义monospaced字体的文字  不赞成使用.  此标签对中文没意义  tt是teletype or monospaced text style的意思
&amp;lt;u&amp;gt; //定义带有下划线的文字  u是underlined text style的意思
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;##显示多种颜色的字&lt;/p&gt;
&lt;p&gt;Android支持html格式的字符串，通过调用Html.fromHtml(str)方法可以转换html格式的字符串str。示例代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TextView textth = (TextView) findViewById(R.id.textth);
String textStr1 = &amp;quot;&amp;lt;font color=\&amp;quot;#123569\&amp;quot;&amp;gt;如果有一天，&amp;lt;/font&amp;gt;&amp;quot;;
String textStr2 = &amp;quot;&amp;lt;font color=\&amp;quot;#00ff00\&amp;quot;&amp;gt;我悄然离去&amp;lt;/font&amp;gt;&amp;quot;;
textth.setText(Html.fromHtml(textStr1 + textStr2));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/RA5ZYDX.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;##字体加粗&lt;/p&gt;
&lt;p&gt;字体加粗还可以通过设置html格式字符串来实现&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;String textStr1 = &amp;quot;&amp;lt;b&amp;gt;sdfa&amp;lt;/b&amp;gt;&amp;quot;;
textth.setText(Html.fromHtml(textStr1));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;##插入图片&lt;/p&gt;
&lt;p&gt;插入图片还可以用html字符串来实现。不过需要用到ImageGetter类来对图片的src属性进行转换。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;String imgStr = &amp;quot;&amp;lt;b&amp;gt;sdfa&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;&amp;lt;img src=\&amp;quot;&amp;quot; + R.mipmap.ic_launcher + &amp;quot;\&amp;quot;/&amp;gt;&amp;quot;;
Html.ImageGetter imageGetter = new Html.ImageGetter() {
        @Override
        public Drawable getDrawable(String source) {
            int id = Integer.parseInt(source);
            Drawable draw = getResources().getDrawable(id);
            draw.setBounds(0, 0, 300, 200);
            return draw;
        }
 };
 TextView textfi = (TextView) findViewById(R.id.textfiv);
 textfi.append(Html.fromHtml(imgStr, imageGetter, null));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/pmkepiS.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;右边的sdfa是通过html来加粗的，下边的图片是通过html插入的。&lt;/p&gt;
&lt;p&gt;#结语&lt;/p&gt;
&lt;p&gt;关注博主是一种态度，评论博主是一种欣赏！！&lt;/p&gt;
&lt;p&gt;最后，欢迎大家关注我的微信公众号：CoderTopia。&lt;/p&gt;
&lt;center&gt;&lt;img style=&quot;width:150px; height:150px&quot; src=&quot;http://img.blog.csdn.net/20160422143030784&quot;&gt;&lt;/center&gt;


&lt;p&gt;参考链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/widget/TextView.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/reference/android/widget/TextView.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/mxgsa/tag/TextView/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/mxgsa/tag/TextView/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.360doc.com/content/13/0620/17/12712639_294320421.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.360doc.com/content/13/0620/17/12712639_294320421.shtml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/y1258429182/article/details/50806750&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/y1258429182/article/details/50806750&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;对于TextView,我想大家都已经熟的不能再熟了。但是它的用法我们真的熟么？为了避免总是一言不合就去翻官方文档，在这里我总结一下我也可能是你容易忽视的一些细节。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="原生控件属性" scheme="http://yoursite.com/categories/%E5%8E%9F%E7%94%9F%E6%8E%A7%E4%BB%B6%E5%B1%9E%E6%80%A7/"/>
    
    
      <category term="TextView" scheme="http://yoursite.com/tags/TextView/"/>
    
      <category term="原生控件属性" scheme="http://yoursite.com/tags/%E5%8E%9F%E7%94%9F%E6%8E%A7%E4%BB%B6%E5%B1%9E%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>Andorid自定义圆形渐变色进度条的从实现到开源</title>
    <link href="http://yoursite.com/2016/04/29/Andorid%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9C%86%E5%BD%A2%E6%B8%90%E5%8F%98%E8%89%B2%E8%BF%9B%E5%BA%A6%E6%9D%A1%E7%9A%84%E4%BB%8E%E5%AE%9E%E7%8E%B0%E5%88%B0%E5%BC%80%E6%BA%90/"/>
    <id>http://yoursite.com/2016/04/29/Andorid自定义圆形渐变色进度条的从实现到开源/</id>
    <published>2016-04-29T06:31:00.000Z</published>
    <updated>2016-05-06T13:49:07.339Z</updated>
    
    <content type="html">&lt;p&gt;Andorid自定义圆形渐变色进度条的从实现到开源的全过程。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/5tRNY53.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;信自己也是一种信仰&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;#写在前面的话&lt;/p&gt;
&lt;p&gt;3月初我在自定义控件概述中挖下的几个坑，前一段时间已经基本填完了，自定义控件的几种实现方式也分别写了demo来进行说明。今天我们来聊一聊如何把&lt;strong&gt;自己封装一个圆形渐变色进度条控件开源到github，并且上传到jcenter方便别人远程依赖&lt;/strong&gt;。先看下效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/N0ckzIs.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;#连接github并提交新项目&lt;/p&gt;
&lt;p&gt;前提条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装Git客户端（&lt;a href=&quot;https://git-scm.com/downloads/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载地址&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;有&lt;a href=&quot;https://github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;账号 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;创建新项目并提交到Github：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在AndroidStudio中新建一个项目&lt;/li&gt;
&lt;li&gt;配置Git:Settings -&amp;gt; Version Control -&amp;gt; Git ,设置git目录,点击Test测试,如果成功会有Success提示&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/Wv6s1jw.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;关联自己的Github账号：Settring -&amp;gt; VersionControl -&amp;gt;GitHub,设置自己的github账号,密码,点击Test测试,如果成功会有Success提示&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/7ZGSmgQ.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;分享项目:VCS -&amp;gt; Import into Version Control -&amp;gt; Share Project on GitHub, 点击之后开始设置 repository name(如果你有设置过MasterPassword 会弹出对话框让填入密码)&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/kg5inwD.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;点击Share之后, 你就可以在GitHub上看到新的仓库，同时在AndroidStudio中CVS下也可以看到版本控制Git，这样就已经设置成功。&lt;/li&gt;
&lt;li&gt;如果你想解除关联,只需要Settrings -&amp;gt; Version Control删掉关联就可以了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;#完成circlebar代码&lt;br&gt;接下来我们来实现我们的圆形渐变色进度条，需要的技能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Canvas绘图基础&lt;/li&gt;
&lt;li&gt;Shader绘制渐变色&lt;/li&gt;
&lt;li&gt;绘制进度条的原理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;##Canvas绘图基础&lt;/p&gt;
&lt;p&gt;关于Canvas绘图，网上的教程很多，这里大概的说一下都有哪些点需要了解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Canvas坐标系与绘图坐标系。&lt;/li&gt;
&lt;li&gt;drawARGB：Canvas中的drawARGB可以用来对整个Canvas以某种统一的颜色整体绘制，四个参数分别是Alpha、Red、Green、Blue，取值都是0-255。&lt;/li&gt;
&lt;li&gt;drawText：Canvas中用drawText方法绘制文字。&lt;/li&gt;
&lt;li&gt;drawPoint：Canvas中用drawPoint方法绘制点。&lt;/li&gt;
&lt;li&gt;drawLine：Canvas通过drawLine方法绘制一条线段，通过drawLines方法绘制多段线。&lt;/li&gt;
&lt;li&gt;drawRect：Canvas通过drawRect方法绘制矩形。&lt;/li&gt;
&lt;li&gt;drawCircle：Canvas中用drawCircle方法绘制圆形。&lt;/li&gt;
&lt;li&gt;drawOval：Canvas中提供了drawOval方法绘制椭圆。&lt;/li&gt;
&lt;li&gt;drawArc：Canvas中提供了drawArc方法用于绘制弧，这里的弧指两种：弧面和弧线，弧面即用弧围成的填充面，弧线即为弧面的轮廓线。&lt;/li&gt;
&lt;li&gt;drawPath：Canvas通过drawPath方法可以绘制Path。那Path是什么呢？Path致以过来是路径的意思，在Android中，Path是一种线条的组合图形，其可以由直线、二次曲线、三次曲线、椭圆的弧等组成。Path既可以画线条，也可以画填充面。&lt;/li&gt;
&lt;li&gt;drawBitmap：Canvas中提供了drawBitmap方法用于绘制Bitmap。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;##Paint和Shader&lt;/p&gt;
&lt;p&gt;###Paint&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;画笔Paint控制着所绘制的图形的具体外观，Paint默认的字体大小为12px，在绘制文本时我们往往要考虑密度density设置合适的字体大小。画笔的默认颜色为黑色，默认的style为FILL，默认的cap为BUTT，默认的线宽为0.&lt;/li&gt;
&lt;li&gt;在画面状的图形时，如果Paint的style是FILL，那么绘制的就是填充面；如果是STROKE，那么绘制的就是轮廓线。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;###Shader&lt;/p&gt;
&lt;p&gt;androd 提供了Shader类专门用来渲染图像以及一些几何图形。Shader下面包括几个直接子类，分别是BitmapShader、 ComposeShader、LinearGradient、RadialGradient、SweepGradient。BitmapShader主要用来渲染图像，LinearGradient 用来进行梯度渲染，RadialGradient 用来进行环形渲染，SweepGradient 用来进行梯度渲染，ComposeShader则是一个 混合渲染，可以和其它几个子类组合起来使用。&lt;/p&gt;
&lt;p&gt;Shader类的使用，都需要先构建Shader对象，然后通过Paint的setShader方法设置渲染对象，然后设置渲染对象，然后再绘制时使用这个Paint对象即可。&lt;/p&gt;
&lt;p&gt;##绘制进度条&lt;/p&gt;
&lt;p&gt;talk is cheap，show you my code。下面说一下绘制圆形渐变进度条的过程。&lt;/p&gt;
&lt;p&gt;首先先跟大家说下原理，我们的主要绘制过程其实非常简单，&lt;strong&gt;调用drawArc方法绘制圆弧&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;先来说下drawArc方法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
  * 绘制弧
  * drawArc (RectF oval, float startAngle, float sweepAngle, boolean useCenter, Paint paint)
  * oval是RecF类型的对象，其定义了椭圆的形状
  * startAngle指的是绘制的起始角度，钟表的3点位置对应着0度，如果传入的startAngle小于0或者大于等于360，那么用startAngle对360进行取模后作为起始绘制角度。
  * sweepAngle指的是从startAngle开始沿着钟表的顺时针方向旋转扫过的角度。如果sweepAngle大于等于360，那么会绘制完整的椭圆环。如果sweepAngle小于0，那么会用sweepAngle对360进行取模后作为扫过的角度。
  * useCenter是个boolean值，如果为true，表示在绘制完环之后，用椭圆的中心点连接环上的起点和终点以闭合环；如果值为false，表示在绘制完环之后，环的起点和终点直接连接，不经过椭圆的中心点。
  */    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;里边需要传一个定义好的矩形&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
  *RectF rectF = new RectF(100, 100, 300, 300);
  * 这四个参数分别代表的意思是：left   top   right   bottom  左 上 右 下
  * left ： 矩形左边的X坐标
  * top:    矩形顶部的Y坐标
  * right :  矩形右边的X坐标
  * bottom： 矩形底部的Y坐标
  * 其实就是矩形的左上角和右下角的坐标值
  */
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来我们来看一个小例子，自定义view，在ondraw中调用如下方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//绘制矩形框和圆弧
private void drawArc(Canvas canvas) {

    canvas.drawARGB(255, 56, 197, 186);

    RectF rectF = new RectF(100, 100, 300, 300);

    paint.setStrokeWidth(1 * density);//设置线宽
    paint.setColor(0xFF6BB7ED);//设置颜色
    paint.setStyle(Paint.Style.FILL);//默认设置画笔为填充模式

    //绘制椭圆
    paint.setStyle(Paint.Style.STROKE);//设置画笔为线条模式
    canvas.drawArc(rectF, 0, 359, false, paint);

    paint.setStrokeWidth(1 * density);//设置线宽
    paint.setColor(0xff8bc5ba);//设置颜色
    paint.setStyle(Paint.Style.STROKE);//默认设置画笔为填充模式

    canvas.drawRect(rectF, paint);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/VJ0oCyl.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们看到当我们以同一个矩形rectF为基准画了一个圆弧和矩形，圆弧正好为矩形的内切圆。这时候我们增大圆弧的线宽为21*density。效果如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/MoYmQXp.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看到圆弧以矩形为基准宽度向矩形外和矩形内各增大了10*density。&lt;/p&gt;
&lt;p&gt;这时候我们以rectF为基准再多画一个圆弧。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; paint.setStrokeWidth(11 * density);//设置线宽
paint.setColor(0xFF303f9f);//设置颜色
paint.setStyle(Paint.Style.FILL);//默认设置画笔为填充模式
paint.setStrokeCap(Paint.Cap.ROUND);

paint.setStyle(Paint.Style.STROKE);//设置画笔为线条模式
canvas.drawArc(rectF, 0, 270, false, paint);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/0jJRZy2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;perfect！可以看到我们要的效果基本已经出来了。&lt;/p&gt;
&lt;p&gt;然后说一下具体的一些细节。&lt;/p&gt;
&lt;p&gt;onmeasure，我们在里边去设置控件的大小为正方形：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {

    int height = getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec);
    int width = getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec);
    int min = Math.min(width, height);// 获取View最短边的长度
    setMeasuredDimension(min, min);// 强制改View为以最短边为长度的正方形

    circleStrokeWidth = Textscale(35, min);// 圆环的宽度
    pressExtraStrokeWidth = Textscale(2, min);// 圆环离矩形的距离
    /**
     * 这四个参数分别代表的意思是：left   top   right   bottom  左 上 右 下
     * left ： 矩形左边的X坐标
     * top:    矩形顶部的Y坐标
     * right :  矩形右边的X坐标
     * bottom： 矩形底部的Y坐标
     * 其实就是矩形的左上角和右下角的坐标值
     */
    mColorWheelRectangle.set(circleStrokeWidth + pressExtraStrokeWidth,
            circleStrokeWidth + pressExtraStrokeWidth, min
                    - circleStrokeWidth - pressExtraStrokeWidth, min
                    - circleStrokeWidth - pressExtraStrokeWidth);// 设置圆环内圆的外接正方形
    mColorWheelPaint.setStrokeWidth(circleStrokeWidth - 5);
    mColorWheelPaintCentre.setStrokeWidth(circleStrokeWidth + 5);
    mDefaultWheelPaint.setStrokeWidth(circleStrokeWidth - Textscale(2, min));
    mDefaultWheelPaint.setShadowLayer(Textscale(10, min), 0, 0, Color.rgb(127, 127, 127));// 设置阴影
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;定义了一个setShaderColor方法来设置渐变色，这里我们用梯度渐变。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
 * 设置渐变色
 *
 * @param shaderColor
 */
public void setShaderColor(int[] shaderColor) {
    this.mColors = shaderColor;
    Shader newShader = new SweepGradient(0, 0, mColors, null);
    mColorWheelPaint.setShader(newShader);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后继承Animation类自定义一个动画效果，即根据进度计算角度，来慢慢绘制我们的进度条。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
 * 进度条动画
 *
 * @author Administrator
 */
public class BarAnimation extends Animation {
    public BarAnimation() {

    }

    /**
     * 每次系统调用这个方法时， 改变mSweepAnglePer，mPercent，stepnumbernow的值，
     * 然后调用postInvalidate()不停的绘制view。
     */
    @Override
    protected void applyTransformation(float interpolatedTime,
                                       Transformation t) {
        super.applyTransformation(interpolatedTime, t);
        if (interpolatedTime &amp;lt; 1.0f) {
            mPercent = Float.parseFloat(fnum.format(interpolatedTime
                    * stepnumber * 100f / stepnumbermax));// 将浮点值四舍五入保留一位小数
            mSweepAnglePer = interpolatedTime * stepnumber * 360
                    / stepnumbermax;
            stepnumbernow = (int) (interpolatedTime * stepnumber);
        } else {
            mPercent = Float.parseFloat(fnum.format(stepnumber * 100f
                    / stepnumbermax));// 将浮点值四舍五入保留一位小数
            mSweepAnglePer = stepnumber * 360 / stepnumbermax;
            stepnumbernow = stepnumber;
        }
        postInvalidate();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;好了，到这里我们的自定义圆形渐变色进度条就完全搞定了。&lt;/p&gt;
&lt;p&gt;#上传到jcenter&lt;/p&gt;
&lt;p&gt;上传到jcenter，我用的是bintray-release这个插件。这里可以参考这篇：&lt;a href=&quot;http://blog.csdn.net/lmj623565791/article/details/51148825&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/lmj623565791/article/details/51148825&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;注册bintray.com账号，&lt;a href=&quot;https://bintray.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;注册地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;引入bintray-release，在需要上传的module里面填写相关publish的信息&lt;/li&gt;
&lt;li&gt;调用上传的命令&lt;/li&gt;
&lt;li&gt;Add to Jcenter提交审核&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;需要注意的是，这里我遇到了一个问题，在这里跟大家分享一下，即当我上传的moudle中带有中文注释，编码为utf-8的时候，上传会抛出异常，然后上传失败。从网上也没有找到太好的解决办法，最后我把中文中是全部删掉才上传成功。如果你有好的解决办法，请告诉我0.0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;#结语&lt;/p&gt;
&lt;p&gt;代码我已经上传到了github，github中有说明文档，欢迎Star、Fork。链接：&lt;a href=&quot;https://github.com/PleaseCallMeCoder/CircleProgressBar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/PleaseCallMeCoder/CircleProgressBar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后，欢迎大家关注我的微信公众号：CoderTopia。&lt;/p&gt;
&lt;center&gt;&lt;img style=&quot;width:150px; height:150px&quot; src=&quot;http://img.blog.csdn.net/20160422143030784&quot;&gt;&lt;/center&gt;

&lt;p&gt;参考链接：&lt;br&gt;&lt;a href=&quot;http://www.androidchina.net/3919.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.androidchina.net/3919.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/lmj623565791/article/details/51148825&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/lmj623565791/article/details/51148825&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Andorid自定义圆形渐变色进度条的从实现到开源的全过程。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="自定义控件" scheme="http://yoursite.com/categories/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
    
      <category term="自定义控件" scheme="http://yoursite.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
      <category term="开源" scheme="http://yoursite.com/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="jcenter" scheme="http://yoursite.com/tags/jcenter/"/>
    
  </entry>
  
  <entry>
    <title>Android性能优化之Performance Tips</title>
    <link href="http://yoursite.com/2016/04/26/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8BPerformance%20Tips/"/>
    <id>http://yoursite.com/2016/04/26/Android性能优化之Performance Tips/</id>
    <published>2016-04-26T03:01:00.000Z</published>
    <updated>2016-05-06T14:02:01.401Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章主要是对官方文档中PerformanceTips（性能优化关键点）的翻译，欢迎拍砖。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/uWNFnJF.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果你真的愿意去努力，你人生最坏的结果，也不过是大器晚成。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;http://developer.android.com/training/articles/perf-tips.html#UseFinal&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/training/articles/perf-tips.html#UseFinal&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;#概述&lt;/p&gt;
&lt;p&gt;这篇文档主要包含一些微小的最佳优化,当把这些组合起来的时候，可以提高App的整体性能，但它不太可能对性能造成戏剧性的影响。选择合适的算法和数据结构应该是你优先考虑的内容,但超出了本文的范围。这个文档更适合作为通用的编码技巧,通过这些技巧使我们的代码更高效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;编写高效代码有两个基本规则:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;不执行不必要的操作&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;不分配不必要的内存&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们面临的最棘手的一个问题是我们的Android应用程序肯定会在多种类型的硬件上运行。不同版本的VM虚拟机运行在不同的处理器的运行速度显然是不同的。你甚至不能简单地说“设备X快/慢于设备Y大概F倍”，然后想当然的认为其在他设备上这个倍数也是成立的。但是,我们仅仅能从模拟器获得很少关于设备性能的信息，它与真机还是有很大不同的。还有,有或没有JIT（即时编译）的设备之间存在巨大差异:在有JIT的设备上完美运行的代码在没有JIT的设备上并不一定能顺畅运行。&lt;/p&gt;
&lt;p&gt;我们要尽量通过优化性能来确保我们的应用在各种各样的设备上都表现良好,确保代码在支持的不同版本上是有效的。&lt;/p&gt;
&lt;p&gt;#避免创建不必要的对象&lt;/p&gt;
&lt;p&gt;对象创建永远不会是免费的。虽然一个带有线程池的垃圾回收器（garbage collector）可以使分配临时对象的内存占用降低,但分配内存总是比不分配内存更昂贵的。&lt;/p&gt;
&lt;p&gt;当我们在我们的应用分配更多的对象时,将迫使一个周期性的垃圾回收,创建“打嗝”的用户体验，即卡顿。在Android 2.3中引入的并发垃圾收集器（GC）可以帮助我们,但不必要的工作能避免要尽量避免。&lt;/p&gt;
&lt;p&gt;因此,这样我们应该避免创建我们不需要的对象，以下是一些实例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你有一个方法返回一个字符串,你知道它的结果需要附加到StringBuffer上,改变你的实现方法使它可以直接添加,而不是创建一个短暂的临时对象。&lt;/li&gt;
&lt;li&gt;当要从一组输入数据中提取字符串时,试着返回一个原始数据的子字符串（substring）,而不是创建一个重复的对象。使用substring的方式，你将创建一个新的String对象，但它将与原数据共享内部char[]空间的。（如果你只使用原始输入的一小部分，无论怎么操作，你都会把它保持在内存中，这点需要权衡）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个更激进的想法是把一个多维数组分割成平行的一维数组:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;int类型的数组比Integer对象数组要好，由此可以知道两个平行的int数组比(int,int)二维数组效率更高。这同样适用于所有的原始数据类型。&lt;/li&gt;
&lt;li&gt;如果你需要实现一个容器存储(Foo,Bar)对象的，试着记住两个平行的Foo[]和Bar[]数组通常比单一阵列的自定义(Foo,Bar)对象要好。（但是有例外,比如当你设计一个API访问其他代码的时候。在这些情况下,通常可以牺牲小部分的性能达到良好的API设计。但在自己的内部代码,我们应该试着尽可能的提高效率。）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般来说,避免创建临时对象。更少的对象创建意味着更少的垃圾收集,这对用户体验有直接的影响。&lt;/p&gt;
&lt;p&gt;#选择Static而不是Virtual&lt;/p&gt;
&lt;p&gt;如果你不需要访问一个对象的字段,可以使用static修饰你的方法。调用将快15%~20%。这是一种很好的做法,因为通过static你还可以知道调用的方法不能改变对象的状态。&lt;/p&gt;
&lt;p&gt;#使用static final修饰常量&lt;/p&gt;
&lt;p&gt;像这样在一个类的顶部声明常量：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;static int intVal = 42;
static String strVal = &amp;quot;Hello, world!&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编译器生成一个类初始化方法,叫做&amp;lt; clinit &amp;gt;,当这个类第一次被使用时执行。这个函数将42存入intVal，还从class文件的常量表中提取了strVal的引用。当之后使用intVal或strVal的时候，他们会直接被查询到。&lt;/p&gt;
&lt;p&gt;我们可以用final关键字来优化：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;static final int intVal = 42;
static final String strVal = &amp;quot;Hello, world!&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这时再也不需要上面的方法了，因为final声明的常量进入了静态dex文件的域初始化部分。调用intVal的代码会直接使用42，调用strVal的代码也会使用一个相对廉价的“string constant”指令，而不是查表。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Notes：这个优化方法只对原始类型和String类型有效，而不是任意引用类型。不过，在必要时使用static final是个很好的习惯。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;#避免内部的Getters/Setters&lt;/p&gt;
&lt;p&gt;像C++等native language，通常使用getters(i = getCount())而不是直接访问变量(i = mCount)。这是编写C++的一种优秀习惯，而且通常也被其他面向对象的语言所采用，例如C#与Java，因为编译器通常会做inline访问，而且你需要限制或者调试变量，你可以在任何时候在getter/setter里面添加代码。&lt;/p&gt;
&lt;p&gt;然而，在Android上，这不是一个好的写法。虚函数的调用比起直接访问变量要耗费更多。在面向对象编程中，将getter和setting暴露给公用接口是合理的，但在类内部应该仅仅使用域直接访问。&lt;/p&gt;
&lt;p&gt;在没有JIT(Just In Time Compiler)时，直接访问变量的速度是调用getter的3倍。有JIT时，直接访问变量的速度是通过getter访问的7倍。&lt;/p&gt;
&lt;p&gt;请注意，如果你使用&lt;a href=&quot;http://developer.android.com/tools/help/proguard.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ProGuard&lt;/a&gt;，你可以获得同样的效果，因为ProGuard可以为你内联访问.&lt;/p&gt;
&lt;p&gt;#使用for-each循环&lt;/p&gt;
&lt;p&gt;增强的For循环（也被称为 for-each 循环）可以被用在实现了 Iterable 接口的 collections 以及数组上。使用collection的时候，Iterator会被分配，用于for-each调用hasNext()和next()方法。使用ArrayList时，手写的计数式for循环会快3倍（不管有没有JIT），但是对于其他collection，增强的for-each循环写法会和迭代器写法的效率一样。&lt;/p&gt;
&lt;p&gt;请比较下面三种循环的方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;static class Foo {
    int mSplat;
}

Foo[] mArray = ...

public void zero() {
    int sum = 0;
    for (int i = 0; i &amp;lt; mArray.length; ++i) {
        sum += mArray[i].mSplat;
    }
}

public void one() {
    int sum = 0;
    Foo[] localArray = mArray;
    int len = localArray.length;

    for (int i = 0; i &amp;lt; len; ++i) {
        sum += localArray[i].mSplat;
    }
}

public void two() {
    int sum = 0;
    for (Foo a : mArray) {
        sum += a.mSplat;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;zero()是最慢的，因为JIT没有办法对它进行优化。&lt;/li&gt;
&lt;li&gt;one()稍微快些。&lt;/li&gt;
&lt;li&gt;two() 在没有做JIT时是最快的，可是如果经过JIT之后，与方法one()是差不多一样快的。它使用了增强的循环方法for-each。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以请尽量使用for-each的方法，但是对于ArrayList，请使用方法one()。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tips：你还可以参考 Josh Bloch 的 《Effective Java》这本书的第46条&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;#使用package代替private以便私有内部类高效访问外部类成员&lt;/p&gt;
&lt;p&gt;参考下面一段代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class Foo {
    private class Inner {
        void stuff() {
            Foo.this.doStuff(Foo.this.mValue);
        }
    }

    private int mValue;

    public void run() {
        Inner in = new Inner();
        mValue = 27;
        in.stuff();
    }

    private void doStuff(int value) {
        System.out.println(&amp;quot;Value is &amp;quot; + value);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里重要的是，我们定义了一个私有的内部类（Foo$Inner），它直接访问了外部类中的私有方法以及私有成员对象。这是合法的，这段代码也会如同预期一样打印出”Value is 27”。&lt;/p&gt;
&lt;p&gt;问题是，VM(虚拟机)因为Foo和Foo$Inner是不同的类，会认为在Foo$Inner中直接访问Foo类的私有成员是不合法的。即使Java语言允许内部类访问外部类的私有成员。为了去除这种差异，编译器会产生一些仿造函数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/*package*/ static int Foo.access$100(Foo foo) {
    return foo.mValue;
}
/*package*/ static void Foo.access$200(Foo foo, int value) {
    foo.doStuff(value);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;每当内部类需要访问外部类中的mValue成员或需要调用doStuff()函数时，它都会调用这些静态方法。这意味着，上面的代码可以归结为，通过accessor函数来访问成员变量。早些时候我们说过，通过accessor会比直接访问域要慢。所以，这是一个特定语言用法造成性能降低的例子。&lt;/p&gt;
&lt;p&gt;如果你正在性能热区（hotspot:高频率、重复执行的代码段）使用像这样的代码，你可以把内部类需要访问的域和方法声明为包级访问，而不是私有访问权限。不幸的是，这意味着在相同包中的其他类也可以直接访问这些域，所以在公开的API中你不能这样做。&lt;/p&gt;
&lt;p&gt;#避免使用浮点类型&lt;/p&gt;
&lt;p&gt;Android系统中float类型的数据存取速度是int类型的一半，尽量优先采用int类型。&lt;/p&gt;
&lt;p&gt;就速度而言，现代硬件上，float 和 double 的速度是一样的。空间而言，double 是两倍float的大小。在空间不是问题的情况下，你应该使用 double 。&lt;/p&gt;
&lt;p&gt;同样，对于整型，有些处理器实现了硬件几倍的乘法，但是没有除法。这时，整型的除法和取余是在软件内部实现的，这在你使用哈希表或大量计算操作时要考虑到。&lt;/p&gt;
&lt;p&gt;#了解并使用库函数&lt;/p&gt;
&lt;p&gt;除了那些常见的让你多使用自带库函数的理由以外，记得系统函数有时可以替代第三方库，并且还有汇编级别的优化，他们通常比带有JIT的Java编译出来的代码更高效。典型的例子是：Android API 中的 &lt;a href=&quot;http://developer.android.com/reference/java/lang/String.html#indexOf%28int%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;String.indexOf()&lt;/a&gt;，Dalvik出于内联性能考虑将其替换。同样 &lt;a href=&quot;http://developer.android.com/reference/java/lang/System.html#arraycopy%28java.lang.Object,%20int,%20java.lang.Object,%20int,%20int%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;System.arraycopy()&lt;/a&gt;函数也被替换，这样的性能在Nexus One测试，比手写的for循环并使用JIT还快9倍。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tips：参见 Josh Bloch 的 《Effective Java》这本书的第47条&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;#小心使用底层方法&lt;/p&gt;
&lt;p&gt;结合&lt;a href=&quot;http://developer.android.com/tools/sdk/ndk/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android NDK&lt;/a&gt;使用native代码开发，并不总是比Java直接开发的效率更好的。Java转native代码是有代价的，而且JIT不能在这种情况下做优化。如果你在native代码中分配资源（比如native堆上的内存，文件描述符等等），这会对收集这些资源造成巨大的困难。你同时也需要为各种架构重新编译代码（而不是依赖JIT）。你甚至对已同样架构的设备都需要编译多个版本：为G1的ARM架构编译的版本不能完全使用Nexus One上ARM架构的优势，反之亦然。&lt;/p&gt;
&lt;p&gt;Native 代码是在你已经有本地代码，想把它移植到Android平台时有优势，而不是为了优化已有的Android Java代码使用。&lt;/p&gt;
&lt;p&gt;如果你要使用JNI,请学习&lt;a href=&quot;http://developer.android.com/training/articles/perf-jni.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JNI Tips&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tips：参见 Josh Bloch 的 《Effective Java》这本书的第54条&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;#性能谬见&lt;/p&gt;
&lt;p&gt;在没有JIT的设备上，使用一种确切的数据类型确实要比抽象的数据类型速度要更有效率（例如，调用HashMap map要比调用Map map效率更高）。有误传效率要高一倍，实际上只是6%左右。而且，在JIT之后，他们直接并没有大多差异。&lt;/p&gt;
&lt;p&gt;在没有JIT的设备上，读取缓存域比直接读取实际数据大概快20%。有JIT时，域读取和本地读取基本无差。所以优化并不值得除非你觉得能让你的代码更易读（这对 final, static, static final 域同样适用）。&lt;/p&gt;
&lt;p&gt;#关于测量&lt;/p&gt;
&lt;p&gt;在优化之前，你应该确定你遇到了性能问题。你应该确保你能够准确测量出现在的性能，否则你也不会知道优化是否真的有效。&lt;/p&gt;
&lt;p&gt;本章节中所有的技巧都需要Benchmark（基准测试）的支持。Benchmark可以在 &lt;a href=&quot;https://code.google.com/archive/p/dalvik/source#svn%2Ftrunk%2Fbenchmarks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;code.google.com “dalvik” project&lt;/a&gt; 中找到。&lt;/p&gt;
&lt;p&gt;Benchmark是基于Java版本的 &lt;a href=&quot;https://github.com/google/caliper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Caliper&lt;/a&gt; microbenchmarking框架开发的。Microbenchmarking很难做准确，所以Caliper帮你完成这部分工作，甚至还帮你测了你没想到需要测量的部分（因为，VM帮你管理了代码优化，你很难知道这部分优化有多大效果）。我们强烈推荐使用Caliper来做你的基准微测工作。&lt;/p&gt;
&lt;p&gt;我们也可以用&lt;a href=&quot;http://developer.android.com/tools/debugging/debugging-tracing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Traceview&lt;/a&gt; 来测量，但是测量的数据是没有经过JIT优化的，所以实际的效果应该是要比测量的数据稍微好些。&lt;/p&gt;
&lt;p&gt;关于如何测量与调试，还可以参考下面两篇文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.android.com/tools/debugging/debugging-tracing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/tools/debugging/debugging-tracing.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.android.com/tools/debugging/systrace.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/tools/debugging/systrace.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章主要是对官方文档中PerformanceTips（性能优化关键点）的翻译，欢迎拍砖。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="性能优化" scheme="http://yoursite.com/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="性能优化" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="官方文档" scheme="http://yoursite.com/tags/%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>Android性能优化之被忽视的Memory Leaks</title>
    <link href="http://yoursite.com/2016/04/19/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E8%A2%AB%E5%BF%BD%E8%A7%86%E7%9A%84Memory%20Leaks/"/>
    <id>http://yoursite.com/2016/04/19/Android性能优化之被忽视的Memory Leaks/</id>
    <published>2016-04-19T10:16:00.000Z</published>
    <updated>2016-05-06T14:06:56.424Z</updated>
    
    <content type="html">&lt;p&gt;Android内存优化之内存泄漏的发现和处理，以及常见情况。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#起因&lt;/p&gt;
&lt;p&gt;写博客就像讲故事，得有起因，经过，结果，人物，地点和时间。今天就容我给大家讲一个故事。人物呢，肯定是我了。故事则发生在最近的这两天,地点在coder君上班的公司。那天无意中我发现了一个奇怪的现象，随着我点开我们App的页面，Memory Monitor中显示占用的内存越来越多（前面的页面已经finish掉了）。咦？什么鬼？&lt;/p&gt;
&lt;p&gt;#经过&lt;/p&gt;
&lt;p&gt;有了问题就解决嘛，俗话说的好，有bug要上，没有bug写个bug也要上。那到底是是什么问题会引起这个现象呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Android中内存相关的问题无非就是这么几点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Memory Leaks 内存泄漏&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Memory Churn 内存抖动&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OutOfMemory  内存溢出&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;阿西吧，仔细想想怎么这么像内存泄漏呢。那到底是不是呢？那我们就一点一点分析一下呗。&lt;/p&gt;
&lt;p&gt;##内存相关数据&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于内存我们可能想了解的数据大概有三点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;总内存&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private String getTotalMemory() {
    String str1 = &amp;quot;/proc/meminfo&amp;quot;;// 系统内存信息文件
    String str2;
    String[] arrayOfString;
    long initial_memory = 0;
    try {
        FileReader localFileReader = new FileReader(str1);
        BufferedReader localBufferedReader = new BufferedReader(
                localFileReader, 8192);
        str2 = localBufferedReader.readLine();// 读取meminfo第一行，系统总内存大小
        arrayOfString = str2.split(&amp;quot;\\s+&amp;quot;);
        for (String num : arrayOfString) {
            Log.i(str2, num + &amp;quot;\t&amp;quot;);
        }
        initial_memory = Integer.valueOf(arrayOfString[1]).intValue() * 1024;// 获得系统总内存，单位是KB，乘以1024转换为Byte
        localBufferedReader.close();
    } catch (IOException e) {
    }
    return Formatter.formatFileSize(getBaseContext(), initial_memory);// Byte转换为KB或者MB，内存大小规格化
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;系统当前可用内存&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private String getAvailMemory() {
    // 获取android当前可用内存大小
    ActivityManager am = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);
    ActivityManager.MemoryInfo mi = new ActivityManager.MemoryInfo();
    am.getMemoryInfo(mi);
    //mi.availMem; 当前系统的可用内存
    return Formatter.formatFileSize(getBaseContext(), mi.availMem);// 将获取的内存大小规格化
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;我们可以使用的内存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;每一个Android设备都会有不同的RAM总大小与可用空间，因此不同设备为app提供了不同大小的heap限制。你可以通过调用getMemoryClass())来获取你的app的可用heap大小。如果你的app尝试申请更多的内存，会出现OutOfMemory的错误。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  在一些特殊的情景下，你可以通过在manifest的application标签下添加largeHeap=true的属性来声明一个更大的heap空间。如果你这样做，你可以通过getLargeMemoryClass())来获取到一个更大的heap size。&lt;/p&gt;
&lt;p&gt;  然而，能够获取更大heap的设计本意是为了一小部分会消耗大量RAM的应用(例如一个大图片的编辑应用)。不要轻易的因为你需要使用大量的内存而去请求一个大的heap size。只有当你清楚的知道哪里会使用大量的内存并且为什么这些内存必须被保留时才去使用large heap. 因此请尽量少使用large heap。使用额外的内存会影响系统整体的用户体验，并且会使得GC的每次运行时间更长。在任务切换时，系统的性能会变得大打折扣。&lt;/p&gt;
&lt;p&gt;  另外, large heap并不一定能够获取到更大的heap。在某些有严格限制的机器上，large heap的大小和通常的heap size是一样的。因此即使你申请了large heap，你还是应该通过执行getMemoryClass()来检查实际获取到的heap大小。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private String getAllocationMemory() {
    // 获取系统分配的内存大小
    ActivityManager am = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);
    //开启了android:largeHeap=&amp;quot;true&amp;quot;,米4系统能分配的内存为512M，不开启为128M
    //return  am.getLargeMemoryClass()+&amp;quot;&amp;quot;;
    //return  am.getMemoryClass()+&amp;quot;&amp;quot;;
}        
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;##Java中的四种引用&lt;/p&gt;
&lt;p&gt;开始分析之前，有必要先了解下Java的内存分配与回收。&lt;/p&gt;
&lt;p&gt;Java的数据类型分为两类：基本数据类型、引用数据类型。&lt;/p&gt;
&lt;p&gt;基本数据类型的值存储在栈内存中，而引用数据类型需要开辟两块存储空间，一块在堆内存中，用于存储该类型的对象;另一块在栈内存中，用于存储堆内存中该对象的引用。&lt;/p&gt;
&lt;p&gt;其中引用类型变量分为四类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;强引用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  最常用的引用形式。把一个对象赋给一个引用类型变量，则为强引用。&lt;/p&gt;
&lt;p&gt;  只要一个引用是强引用，则垃圾回收器永远都无法回收这个对象的内存空间，除非JVM终止。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;软引用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  当内存资源充足的时候，垃圾回收器不会回收软引用对应的对象的内存空间;但当内存资源紧张时，软引用所对应的对象就会被垃圾回收器回收。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//创建一个Student类型的软引用

SoftReference&amp;lt;Student&amp;gt; sr = new SoftReference&amp;lt;Student&amp;gt;(new Student());
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;弱引用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  不管JVM内存资源是否紧张，只要垃圾回收器运行，弱引用所对应的对象就会被释放。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;虚引用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  虚引用等于没有引用，无法通过虚引用访问其对应的对象。&lt;/p&gt;
&lt;p&gt;  软引用和弱引用在其对象被回收之后，这些引用会被添加到引用队列中去;而虚引用在其对象被回收之前，虚引用就被添加到引用队列中去了。因此虚引用可以在其对象被释放之前进行一些操作。&lt;/p&gt;
&lt;p&gt;  虚引用和引用队列绑定的方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//创建引用队列  
ReferenceQueue&amp;lt;String&amp;gt; queue = new ReferenceQueue&amp;lt;String&amp;gt;();  
//创建虚引用，并绑定引用队列  
PhantomReference&amp;lt;String&amp;gt; str = new PhantomReference&amp;lt;String&amp;gt;(&amp;quot;啦啦啦&amp;quot;,queue);    
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;##Garbage Collection Android中的垃圾回收&lt;/p&gt;
&lt;p&gt;Android系统会在适当的时机触发GC操作，一旦进行GC操作，就会&lt;strong&gt;将一些不再使用的对象进行回收&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;执行GC操作的时候，所有线程的任何操作都会需要暂停，等待GC操作完成之后，其他操作才能够继续运行。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通常来说，单个的GC并不会占用太多时间，但是大量不停的GC操作则会显著占用帧间隔时间(16ms)。如果在帧间隔时间里面做了过多的GC操作，那么自然其他类似计算，渲染等操作的可用时间就变得少了&lt;/p&gt;
&lt;p&gt;##Memory Leaks内存泄漏&lt;/p&gt;
&lt;p&gt;内存泄漏表示的是不再用到的对象因为被错误引用而无法进行回收。发生内存泄漏会导致Memory Generation中的剩余可用Heap Size越来越小，这样会导致频繁触发GC，更进一步引起性能问题。&lt;/p&gt;
&lt;p&gt;总结起来其实很简单：&lt;strong&gt;存在无效的引用!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内存泄露可以引发很多的问题，常见的内存泄露导致问题如下：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;应用卡顿，响应速度慢（内存占用高时JVM虚拟机会频繁触发GC）;&lt;/strong&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;应用被从后台进程干为空进程；&lt;/strong&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;应用莫名的崩溃（也就是超过了HeepSize阈值引起OOM）；&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;##内存泄漏分析工具&lt;/p&gt;
&lt;p&gt;看到这些问题，突然发现好像离真相越来越近了0.0。&lt;/p&gt;
&lt;p&gt;想要更加清楚地实时知晓当前应用程序的内存使用情况，我们需要通过一些工具来实现。比较好用的工具有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Memory Analyzer Tool&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LeakCanary&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我们分开介绍。&lt;/p&gt;
&lt;p&gt;###Memory Analyzer Tool&lt;/p&gt;
&lt;p&gt;Memory Analysis Tools（&lt;a href=&quot;http://www.eclipse.org/mat/downloads.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点我下载&lt;/a&gt;）是一个专门分析Java堆数据内存引用的工具，我们可以使用它方便的定位内存泄露原因，核心任务就是找到GC ROOT位置。接下来说下使用步骤。&lt;/p&gt;
&lt;p&gt;####抓取内存信息&lt;/p&gt;
&lt;p&gt;AndriodStudio中抓取内存信息还是很方便的，有两种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用Android Device Monitor&lt;/p&gt;
&lt;p&gt;  点击Android Studio工具栏上的Tool–&amp;gt;Android Device Monitor    &lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://i.imgur.com/7ndnk8N.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;  在Android Device Monitor界面中选在你要分析的应用程序的包名，点击Update Heap来更新统计信息，然后点击Cause GC即可查看当前堆的使用情况，点击Dump HPROF file，将该应用当前的内存信息保存成hprof文件，放在桌面即可，操作如下图&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://i.imgur.com/CuAzhDK.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;直接获取&lt;/p&gt;
&lt;p&gt;  Android Studio的最新版本可以直接获取hprof文件，但是注意&lt;strong&gt;在使用之前一定要手动点击 Initiate GC按钮手动触发GC&lt;/strong&gt;，这样抓到的内存使用情况就是不包括Unreachable对象的。&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://i.imgur.com/mM8Dhr5.png&quot; alt=&quot;&quot;&gt;  &lt;/p&gt;
&lt;p&gt;  稍等片刻，生成的文件会出现在captures中，然后选择文件，点击右键转换成标准的hprof文件，就可以在MAT中打开了。&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://i.imgur.com/gFGFREY.png&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;####使用MAT工具查看分析&lt;/p&gt;
&lt;p&gt;这里我写了个简单的demo来测试，这个demo一共有两个页面，在跳转到第二个页面之后，新开一个现成去打印activity信息。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
 * 打印ActivityName
 */

public void printActivityName() {

    for (int i = 0; i &amp;lt; 100; i++) {

        new Thread(new Runnable() {

            @Override

            public void run() {

                while (true)

                    try {

                        Thread.sleep(1000 * 30);

                        Log.e(ActivityHelper.class.getSimpleName(), ((Activity) mContext).getClass().getSimpleName());

                    } catch (InterruptedException e) {

                        e.printStackTrace();

                    }

            }

        }).start();

    }

}    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;多次进入SecondActivity之后会发现内存一直在增长，并没有降低。&lt;/p&gt;
&lt;p&gt;而且log里会不停的输出log，打印当前activity的name。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/ETupC9m.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/3t9RMon.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在MAT中打开抓取到的文件后如图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Gv0jNbl.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;MAT中提供了非常多的功能，这里我们只要学习几个最常用的就可以了。上图最中央的那个饼状图展示了最大的几个对象所占内存的比例，这张图中提供的内容并不多，我们可以忽略它。红色框中有两个非常有用的工具是我们常用的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Histogram可以列出内存中每个对象的名字、数量以及大小。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dominator Tree会将所有内存中的对象按大小进行排序，并且我们可以分析对象之间的引用结构。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们先来看Histogram&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/lBC3TnL.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们应该如何去分析内存泄漏呢?即分析大内存的对象。但是假如我们有目标对象的话，左上角值支持正则表达式的，我们输入SecondActivity。这里我们看到，我们有5个SecondActivity的实例，因为我们引用SecondActivity的现成没有销毁，导致会有很多实例。&lt;/p&gt;
&lt;p&gt;接下来对着SecondActivity右键 -&amp;gt; List objects -&amp;gt; with incoming references查看具体SecondActivity实例，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/eeWrRF0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果想要查看内存泄漏的具体原因，可以对着任意一个MainActivity的实例右键 -&amp;gt; Path to GC Roots -&amp;gt; exclude weak references，结果如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/PmxCiLs.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看到红色框中，因为我们的线程持有SecondActivity的实例，所有导致内存泄漏。&lt;/p&gt;
&lt;p&gt;此外，我们可以选择以我们项目的包结构的形式来查看&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/rKwJGtr.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;接下来我们看下Dominator Tree。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/e4mc0Gc.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;关于Dominator Tree我们需要注意三点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先Retained Heap表示这个对象以及它所持有的其它引用（包括直接和间接）所占的总内存，因此从上图中看，前两行的Retained Heap是最大的，我们分析内存泄漏时，内存最大的对象也是最应该去怀疑的。&lt;/li&gt;
&lt;li&gt;带有黄点的对象就表示是可以被GC Roots访问到的，根据上面的讲解，可以被GC Root访问到的对象都是无法被回收的。&lt;/li&gt;
&lt;li&gt;并不是所有带黄点的对象都是泄漏的对象，有些对象系统需要一直使用，本来就不应该被回收。我们可以注意到，有些带黄点的对象最右边会写一个System Class，说明这是一个由系统管理的对象，并不是由我们自己创建并导致内存泄漏的对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在我们可以对着我们想查看的内容点击右键 -&amp;gt; Path to GC Roots -&amp;gt; exclude weak references，为什么选择exclude weak references呢？因为弱引用是不会阻止对象被垃圾回收器回收的，所以我们这里直接把它排除掉，然后一步一步分析。&lt;/p&gt;
&lt;p&gt;###LeakCanary&lt;/p&gt;
&lt;p&gt;leakcanary是一个开源项目，一个内存泄露自动检测工具，是著名的GitHub开源组织Square贡献的，它的主要优势就在于自动化过早的发觉内存泄露、配置简单、抓取贴心，缺点在于还存在一些bug，不过正常使用百分之九十情况是OK的，其核心原理与MAT工具类似。&lt;/p&gt;
&lt;p&gt;因为配置十分简单，这里就不多说了，&lt;a href=&quot;https://github.com/square/leakcanary&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们看下分析结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/BE8T7JP.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;简单直白！&lt;/p&gt;
&lt;p&gt;##常见内存泄漏情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;构造Adapter时，没有使用缓存的 convertView &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bitmap对象不在使用时调用recycle()释放内存 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Context使用不当造成内存泄露：不要对一个Activity Context保持长生命周期的引用。尽量在一切可以使用应用ApplicationContext代替Context的地方进行替换。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;非静态内部类的静态实例容易造成内存泄漏：即一个类中如果你不能够控制它其中内部类的生命周期（譬如Activity中的一些特殊Handler等），则尽量使用静态类和弱引用来处理（譬如ViewRoot的实现）。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;警惕线程未终止造成的内存泄露；譬如在Activity中关联了一个生命周期超过Activity的Thread，在退出Activity时切记结束线程。一个典型的例子就是HandlerThread的run方法是一个死循环，它不会自己结束，线程的生命周期超过了Activity生命周期，我们必须手动在Activity的销毁方法中中调运thread.getLooper().quit();才不会泄露。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对象的注册与反注册没有成对出现造成的内存泄露；譬如注册广播接收器、注册观察者（典型的譬如数据库的监听）等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建与关闭没有成对出现造成的泄露；譬如Cursor资源必须手动关闭，WebView必须手动销毁，流等对象必须手动关闭等。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不要在执行频率很高的方法或者循环中创建对象（比如onmeasure），可以使用HashTable等创建一组对象容器从容器中取那些对象，而不用每次new与释放。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;避免代码设计模式的错误造成内存泄露；譬如循环引用，A持有B，B持有C，C持有A，这样的设计谁都得不到释放。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#结果&lt;/p&gt;
&lt;p&gt;真相只有一个，那就是确实是由于内存泄漏才出现我遇到的情况。程序员嘛，谁还不踩个坑，跳出来，拍拍身上的灰尘，总结一下，过两天又是一条帮帮的coder。&lt;a href=&quot;http://download.csdn.net/detail/sdkfjksf/9496090&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源码&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Android内存优化之内存泄漏的发现和处理，以及常见情况。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="性能优化" scheme="http://yoursite.com/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="性能优化" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="内存优化" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/"/>
    
      <category term="MAT" scheme="http://yoursite.com/tags/MAT/"/>
    
      <category term="leakcanary" scheme="http://yoursite.com/tags/leakcanary/"/>
    
      <category term="内存泄漏" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Androd自定义控件（五）打造自己的Camera</title>
    <link href="http://yoursite.com/2016/04/12/Androd%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%EF%BC%88%E4%BA%94%EF%BC%89%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84Camera/"/>
    <id>http://yoursite.com/2016/04/12/Androd自定义控件（五）打造自己的Camera/</id>
    <published>2016-04-12T13:30:00.000Z</published>
    <updated>2016-05-06T14:31:36.269Z</updated>
    
    <content type="html">&lt;p&gt;使用surfaceview自定义相机，同时把自己踩过的坑分享给大家，希望大家有所收获。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#写在前面的话&lt;br&gt;前一阵子负责一个自定义相机进行拍照并在另一个页面进行人脸识别的模块，相机部分需求并不怎么复杂，可以切换前后摄像头，可以拍照并把照片返回上一个页面。由于没有怎么接触过自定义相机的部分，而网上的一些资料又不全，踩了不少坑。故在这里总结一下，希望对大家有所帮助，同时把自定义控件系列的最后一个坑填上（surfaceview）。效果图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160412212407832&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;#Android中开发相机的两种方式&lt;/p&gt;
&lt;p&gt;Android系统提供了两种使用手机相机资源实现拍摄功能的方法，&lt;strong&gt;一种是直接通过Intent调用系统相机组件&lt;/strong&gt;，这种方法快速方便，适用于直接获得照片的场景，如上传相册，微博、朋友圈发照片等。&lt;strong&gt;另一种是使用相机API来定制自定义相机&lt;/strong&gt;，这种方法适用于需要定制相机界面或者开发特殊相机功能的场景，如需要对照片做裁剪、滤镜处理，添加贴纸，表情，地点标签等。&lt;/p&gt;
&lt;p&gt;##调用系统自带相机&lt;br&gt;关于系统自带相机的调用非常简单，这里我就不过多叙述了，具体可以参考谷歌的&lt;a href=&quot;http://developer.android.com/training/camera/photobasics.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Training&lt;/a&gt;。我只说容易被大家忽视的几个点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果我们的应用使用相机，但相机并不是应用的正常运行所必不可少的组件，可以将权限声明中的android:required设置为”false”。这样的话，Google Play 也会允许没有相机的设备下载该应用。当然我们有必要在使用相机之前通过调用hasSystemFeature(PackageManager.FEATURE_CAMERA)方法来检查设备上是否有相机。如果没有，我们应该禁用和相机相关的功能！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在调用startActivityForResult()方法之前，先调用resolveActivity()，这个方法会返回能处理该Intent的第一个Activity（译注：即检查有没有能处理这个Intent的Activity）。执行这个检查非常重要，因为如果在调用startActivityForResult()时，没有应用能处理你的Intent，应用将会崩溃。所以只要返回结果不为null，使用该Intent就是安全的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;##使用Android框架所提供的API来直接控制相机硬件&lt;/p&gt;
&lt;p&gt;使用API来控制相机我们需要用到关键类和接口：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用Camera对象来控制相机&lt;/li&gt;
&lt;li&gt;使用SurfaceView来展现照相机采集的图像&lt;/li&gt;
&lt;li&gt;通过surfaceholder来控制surfac的尺寸和格式，修改surface的像素，监视surface的变化等等&lt;/li&gt;
&lt;li&gt;通过SurfaceHolder.Callback 接口，监听surface状态变化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来我们分为以下三部分来介绍：关键类以及接口的作用和方法，Camera控制拍照步骤，自定义相机容易踩到的坑以及解决办法。&lt;/p&gt;
&lt;p&gt;###&lt;strong&gt;API说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Camera ：最主要的类，用于管理和操作camera资源。它提供了完整的相机底层接口，支持相机资源切换，设置预览/拍摄尺寸，设定光圈、曝光、聚焦等相关参数，获取预览/拍摄帧数据等功能，主要方法有以下这些：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;open()：获取camera实例。&lt;/li&gt;
&lt;li&gt;setPreviewDisplay(SurfaceHolder)：绑定绘制预览图像的surface。surface是指向屏幕窗口原始图像缓冲区（raw buffer）的一个句柄，通过它可以获得这块屏幕上对应的canvas，进而完成在屏幕上绘制View的工作。通过surfaceHolder可以将Camera和surface连接起来，当camera和surface连接后，camera获得的预览帧数据就可以通过surface显示在屏幕上了。&lt;/li&gt;
&lt;li&gt;setPrameters设置相机参数，包括前后摄像头，闪光灯模式、聚焦模式、预览和拍照尺寸等。&lt;/li&gt;
&lt;li&gt;startPreview():开始预览，将camera底层硬件传来的预览帧数据显示在绑定的surface上。&lt;/li&gt;
&lt;li&gt;stopPreview():停止预览，关闭camra底层的帧数据传递以及surface上的绘制。&lt;/li&gt;
&lt;li&gt;release():释放Camera实例&lt;/li&gt;
&lt;li&gt;takePicture(Camera.ShutterCallback shutter, Camera.PictureCallback raw, Camera.PictureCallback jpeg):这个是实现相机拍照的主要方法，包含了三个回调参数。shutter是快门按下时的回调，raw是获取拍照原始数据的回调，jpeg是获取经过压缩成jpg格式的图像数据的回调。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SurfaceView ：用于绘制相机预览图像的类，提供给用户实时的预览图像。普通的view以及派生类都是共享同一个surface的，所有的绘制都必须在UI线程中进行。而surfaceview是一种比较特殊的view，它并不与其他普通view共享surface，而是在内部持有了一个独立的surface,surfaceview负责管理这个surface的格式、尺寸以及显示位置。由于UI线程还要同时处理其他交互逻辑，因此对view的更新速度和帧率无法保证，而surfaceview由于持有一个独立的surface，因而可以在独立的线程中进行绘制，因此可以提供更高的帧率。自定义相机的预览图像由于对更新速度和帧率要求比较高，所以比较适合用surfaceview来显示。&lt;/p&gt;
&lt;p&gt;SurfaceHolder ：surfaceholder是控制surface的一个抽象接口，它能够控制surface的尺寸和格式，修改surface的像素，监视surface的变化等等，surfaceholder的典型应用就是用于surfaceview中。surfaceview通过getHolder()方法获得surfaceholder 实例，通过后者管理监听surface 的状态。&lt;/p&gt;
&lt;p&gt;SurfaceHolder.Callback 接口 ：负责监听surface状态变化的接口，有三个方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;surfaceCreated(SurfaceHolder holder)：在surface创建后立即被调用。在开发自定义相机时，可以通过重载这个函数调用camera.open()、camera.setPreviewDisplay()，来实现获取相机资源、连接camera和surface等操作。&lt;/li&gt;
&lt;li&gt;surfaceChanged(SurfaceHolder holder, int format, int width, int height):在surface发生format或size变化时调用。在开发自定义相机时，可以通过重载这个函数调用camera.startPreview来开启相机预览，使得camera预览帧数据可以传递给surface，从而实时显示相机预览图像。&lt;/li&gt;
&lt;li&gt;surfaceDestroyed(SurfaceHolder holder)：在surface销毁之前被调用。在开发自定义相机时，可以通过重载这个函数调用camera.stopPreview()，camera.release()来实现停止相机预览及释放相机资源等操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;###&lt;strong&gt;Camera控制拍照的过程&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用Camera的open()方法打开相机。&lt;/li&gt;
&lt;li&gt;调用Camera的getParameters（）获取拍照参数，该方法返回一个Cmera.Parameters对象。&lt;/li&gt;
&lt;li&gt;调用Camera.Parameters对象对照相的参数进行设置。&lt;/li&gt;
&lt;li&gt;调用Camera的setParameters（），并将Camera.Parameters对象作为参数传入，这样就可以对拍照进行参数控制，Android2.3.3以后不用设置。&lt;/li&gt;
&lt;li&gt;调用Camerade的startPreview()的方法开始预览取景，在之前需要调用Camera的setPreviewDisplay(SurfaceHolder holder)设置使用哪个SurfaceView来显示取得的图片。&lt;/li&gt;
&lt;li&gt;调用Camera的takePicture()方法进行拍照。&lt;/li&gt;
&lt;li&gt;程序结束时，要调用Camera的stopPreview()方法停止预览，并且通过Camera.release()来释放资源。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体实现代码戳后面链接&lt;/p&gt;
&lt;p&gt;###&lt;strong&gt;踩坑与填坑&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;####&lt;strong&gt;预览方向&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先看下官方文档的说明&lt;/p&gt;
&lt;p&gt;Most camera applications lock the display into landscape mode because that is the natural orientation of the camera sensor. This setting does not prevent you from taking portrait-mode photos, because the orientation of the device is recorded in the EXIF header. The setCameraDisplayOrientation() method lets you change how the preview is displayed without affecting how the image is recorded. However, in Android prior to API level 14, you must stop your preview before changing the orientation and then restart it.&lt;/p&gt;
&lt;p&gt;大多数相机程序会锁定预览为横屏状态，因为该方向是相机传感器的自然方向。当然这一设定并不会阻止我们去拍竖屏的照片，因为设备的方向信息会被记录在EXIF头中。setCameraDisplayOrientation()方法可以让你在不影响照片拍摄过程的情况下，改变预览的方向。然而，对于Android API Level 14及以下版本的系统，在改变方向之前，我们必须先停止预览，然后再去重启它。&lt;/p&gt;
&lt;p&gt;####&lt;strong&gt;SurfaceView预览图像拉伸变形，拍摄照片尺寸不对&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说明这个问题之前，同样先说一下几个跟相机有关的尺寸。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SurfaceView尺寸 ：即自定义相机应用中用于显示相机预览图像的View的尺寸，当它铺满全屏时就是屏幕的大小。这里surfaceview显示的预览图像暂且称作手机预览图像。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Previewsize ：相机硬件提供的预览帧数据尺寸。预览帧数据传递给SurfaceView，实现预览图像的显示。这里预览帧数据对应的预览图像暂且称作相机预览图像。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Picturesize ：相机硬件提供的拍摄帧数据尺寸。拍摄帧数据可以生成位图文件，最终保存成.jpg或者.png等格式的图片。这里拍摄帧数据对应的图像称作相机拍摄图像。图4说明了以上几种图像及照片之间的关系。手机预览图像是直接提供给用户看的图像，它由相机预览图像生成，拍摄照片的数据则来自于相机拍摄图像。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原因是没有正确设置比例 parameter.setPictureSize(width,height)，这个比例不是你决定的，要先通过camera.getParameters().getSupportedPictureSizes()获得手机支持的尺寸。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 设置照片格式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private void setParameter() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Camera.Parameters parameters = camera.getParameters(); // 获取各项参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        parameters.setPictureFormat(PixelFormat.JPEG); // 设置图片格式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        parameters.setJpegQuality(100); // 设置照片质量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //获得相机支持的照片尺寸,选择合适的尺寸&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;Camera.Size&amp;gt; sizes = parameters.getSupportedPictureSizes();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int maxSize = Math.max(display.getWidth(), display.getHeight());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int length = sizes.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (maxSize &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            for (int i = 0; i &amp;lt; length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (maxSize &amp;lt;= Math.max(sizes.get(i).width, sizes.get(i).height)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    parameters.setPictureSize(sizes.get(i).width, sizes.get(i).height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;Camera.Size&amp;gt; ShowSizes = parameters.getSupportedPreviewSizes();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int showLength = ShowSizes.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (maxSize &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            for (int i = 0; i &amp;lt; showLength; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (maxSize &amp;lt;= Math.max(ShowSizes.get(i).width, ShowSizes.get(i).height)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    parameters.setPreviewSize(ShowSizes.get(i).width, ShowSizes.get(i).height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        camera.setParameters(parameters);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;####&lt;strong&gt;前置摄像头的镜像效果&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android 相机硬件有个特殊设定，就是对于前置摄像头，在展示预览视图时采用类似镜面的效果，显示的是摄像头成像的镜像。而拍摄出的照片则仍采用摄像头成像。看到这里，大家可能会有些怀疑，不妨现在就试试自己 Android 手机上的前置摄像头，对比下预览图像和拍摄出照片的区别。这是由于底层相机在传递前置摄像头预览数据时做了水平翻转变换，即将x方向镜像翻转180度。这个变化对之前竖屏预览的方向也会造成影响，本来对于后置摄像头旋转90度即可使预览视图正确，而对前置摄像头，如果也旋转90度的话，看到的预览图像则是上下颠倒的（因为x方向翻转了180度），因此必须再旋转180度，才能显示正确。&lt;br&gt;解决方案，在保存图片的时候根据选择的摄像头做对应的翻转。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//将照片改为竖直方向&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, data.length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    Matrix matrix = new Matrix();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    switch (cameraPosition) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        case 0://前&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            matrix.preRotate(270);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        case 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            matrix.preRotate(90);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;同时在开发的过程中发现了一个有趣的东西，我们用前置摄像头拍出来的照片其实是左右翻转的。但我用小米自带的相机测试发现，当摄像头中有人脸出现的时候，相机会做左右翻转的操作，以给用户更好的体验。    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://download.csdn.net/detail/sdkfjksf/9489134&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源码戳这里。&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;使用surfaceview自定义相机，同时把自己踩过的坑分享给大家，希望大家有所收获。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="自定义控件" scheme="http://yoursite.com/categories/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
    
      <category term="自定义控件" scheme="http://yoursite.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
      <category term="Camera" scheme="http://yoursite.com/tags/Camera/"/>
    
      <category term="surfaceview" scheme="http://yoursite.com/tags/surfaceview/"/>
    
      <category term="相机" scheme="http://yoursite.com/tags/%E7%9B%B8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>这些Tips让你的App更容易维护</title>
    <link href="http://yoursite.com/2016/04/09/%E8%BF%99%E4%BA%9BTips%E8%AE%A9%E4%BD%A0%E7%9A%84App%E6%9B%B4%E5%AE%B9%E6%98%93%E7%BB%B4%E6%8A%A4/"/>
    <id>http://yoursite.com/2016/04/09/这些Tips让你的App更容易维护/</id>
    <published>2016-04-09T09:34:00.000Z</published>
    <updated>2016-05-07T04:52:15.406Z</updated>
    
    <content type="html">&lt;p&gt;提高App的可维护性和可扩展性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
##前言&lt;br&gt;在开始正文之前容我先描述几个场景，可能你也遇到过或者将要遇到，也可能你已经完美的解决了这些问题。现在我把它们拿出来跟大家讨论。&lt;br&gt;###场景一&lt;br&gt;同事A离职，他负责的是报表模块，同事B是一个刚毕业的大学生。某天产品经理说报表模块需要改动，交给B来负责。同事A走的时候没有交接，没写文档，需要B从头理清然后修改。然后B在看的过程中发现，A的代码命名既有拼音又有英文，还有一些毫无关联的命名。如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var ischange  =&amp;apos;false&amp;apos;;  //查询条件是否改变&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var ssssss=[];           //保存上一次结果的笛卡尔积&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var mapaddWei = new Array();//保存小分类的值&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;并且A的一个方法包含100行到1000多行代码不等。致使B花了大概一周多的时间才把A的代码完全看懂。&lt;/p&gt;
&lt;p&gt;###场景二&lt;br&gt;A所在公司的App1.0版本已经上线。连续进行了4次小更新后的某天，产品经理又要求A去修改主页面，包括UI和部分逻辑的变动。改完之后又过了不久，产品经理提出要增加一个商城模块。这时候A发现，项目越来越臃肿，代码越改越乱，越改越烂，甚至自己写的类都忘记了放在哪个包下。&lt;/p&gt;
&lt;p&gt;之后用户反馈说Android5.0系统注册闪退。A和同事通过查找发现问题出在网络框架上，他们所用的网络框架不支持5.0及以上系统。但是由于在最开始设计这款App的时候没有再网络框架的上层封装一层自己的接口，导致所有用到网络请求的地方都需要修改。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;通过这两个场景我们可以发现，一个App的可维护性和可扩展性在开发中是尤为重要的，本文所讲述的这些Tips概括的说明了如何去构建一个可维护可扩展的App。&lt;/p&gt;
&lt;p&gt;##包结构&lt;br&gt;对于包结构来说，个人觉得简单明了就好，保证让人一目了然，方便查找。大概有两种分法：按主题分和按功能分。&lt;/p&gt;
&lt;p&gt;按主题分，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160411160341894&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;按模块分，如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160411161338329&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;相比较来说，第二种的优势在于如果我们要增加模块的话，我们只需新增一个包，其他包的内容基本不需要动。而且当我们修改固定模块的时候也更方便查找我们要修改的内容。&lt;/p&gt;
&lt;p&gt;##代码风格&lt;br&gt;代码风格对代码的可读性影响很多，基本上java入门篇必谈。一段很难看懂的代码维护起来无疑成本会变高很多。&lt;/p&gt;
&lt;p&gt;###命名规范&lt;br&gt;Android中的变量和方法的命名要能正确的体现出他们的含义，符合驼峰命名法，尽量不要用缩写。还有一些习惯性的写法如常量写成public static final 然后名字全用大写等等。&lt;/p&gt;
&lt;p&gt;###排版&lt;br&gt;同类变量放在一组声明，不同组之间用空白行隔开。不同代码块之间尽量也要留一个空白行。&lt;/p&gt;
&lt;p&gt;###注释&lt;br&gt;为关键代码添加注释。如果你的代码命名合理的话，那么大部分代码还是不用添加注释的。&lt;/p&gt;
&lt;p&gt;##代码层次和单一职责原则&lt;br&gt;不要试图让一个司机去做厨子的事。&lt;/p&gt;
&lt;p&gt;把一段业务逻辑细分为几个子逻辑，每个子逻辑只关注自己的工作，让职责变的单一。&lt;/p&gt;
&lt;p&gt;举个栗子。皇帝说“朕今天中午想吃满汉全席”。这时候太监就会去通知御膳房。御膳房总管会分配采购人员去准备材料，然后吩咐御厨去给皇上做满汉全席。这样整个业务逻辑就比较清晰了，同时太监做了太监的事，御厨做了御厨的事，各司其职。&lt;/p&gt;
&lt;p&gt;##面向接口编程&lt;br&gt;在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的,对系统设计人员来讲就不那么重要了；而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。&lt;/p&gt;
&lt;p&gt;拿第二个场景来说，我们自己封装一个网络操作接口，这个接口规定了他的实现类可以实现post请求。然后我们去调用接口的post方法。这样无论我们用xutils还是volley或者okhttp去实现post方法，修改起来对替他部分都不会有影响。&lt;/p&gt;
&lt;p&gt;##面向扩展编程&lt;/p&gt;
&lt;p&gt;其实这个点能不能把握好，更多的是看个人经验。如果考虑到某个模块的逻辑到后面会做一些改动，那我们在最开始设计的时候就可以为这个模块留出来更改的余地，这样就能更好的去扩展我们的应用，同时减少因为扩展带来的工作量。&lt;/p&gt;
&lt;p&gt;##设计模式&lt;/p&gt;
&lt;p&gt;设计模式包含两部分，一部分是App的设计模式，另一部分是App内模块的设计模式。良好并且适度的设计模式会给我们App的扩展和维护节约很大成本。&lt;/p&gt;
&lt;p&gt;###App的设计模式&lt;br&gt;Android中App的设计模式包括早期的MVC模式和最近比较流行的MVP和MVVM模式。&lt;/p&gt;
&lt;p&gt;MVC模式大家肯定已经很熟悉了，这里就不多说了。对于MVP模式，我和同事在上一个版本的App中做了一些尝试。&lt;/p&gt;
&lt;p&gt;MVP无疑是有好多有点的：1、Model与View完全分离，它们通过接口进行交互，便于维护和测试。2、可以更高效地使用Model，因为所有对Model的操作都在Presenter内部。3、我们可以将一个Presener用于多个视图，只需要在Presenter中为不同的View定义View Interface即可，具体的View实现自己的View Interface，即可使用Presenter中的Model操作等。&lt;/p&gt;
&lt;p&gt;但是它会带来额外的代码复杂度及学习成本。对于一个小的开发团队来说，可能效果并不会像想象中的那么明显。&lt;/p&gt;
&lt;p&gt;###App内模块的设计模式&lt;br&gt;常见的设计模式有很多，比如工厂模式，单利模式，适配器模式，观察者模式等等，由于本篇博客只是系统的讨论，就不对细节做过多说明了，大家可以研究一下《大话设计模式》和《HeadFrist设计模式》等等。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;写本篇博客权当抛砖引玉了，感兴趣的朋友大家可以一起讨论。&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;提高App的可维护性和可扩展性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="性能优化" scheme="http://yoursite.com/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="可扩展" scheme="http://yoursite.com/tags/%E5%8F%AF%E6%89%A9%E5%B1%95/"/>
    
      <category term="App设计模式" scheme="http://yoursite.com/tags/App%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="可维护" scheme="http://yoursite.com/tags/%E5%8F%AF%E7%BB%B4%E6%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>Androd自定义控件（四）自定义类继承viewgroup</title>
    <link href="http://yoursite.com/2016/04/05/Androd%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%EF%BC%88%E5%9B%9B%EF%BC%89%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E7%BB%A7%E6%89%BFviewgroup/"/>
    <id>http://yoursite.com/2016/04/05/Androd自定义控件（四）自定义类继承viewgroup/</id>
    <published>2016-04-05T06:44:00.000Z</published>
    <updated>2016-05-06T14:28:07.383Z</updated>
    
    <content type="html">&lt;p&gt;自定义类继承ViewGroup。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在前面已经跟大家分享了，自定义view概述，自定义view需要知道的方法，自定义类继承view，自定义组合控件。今天跟大家分享一下自定义类继承viewgroup，当初挖的坑也就快填完了（四种自定义view，今天是第三种），希望大家能有所收获。&lt;/p&gt;
&lt;p&gt;###1.自定义viewgroup和组合控件的区别&lt;br&gt;从目的来看：&lt;strong&gt;大部分情况下组合控件是用创建一个囊括逻辑和布局的视图的方式，达到重复使用而不用在不同的场合中写重复的代码目的，而自定义viewgroup是更倾向于自定义属性来定制 ViewGroup 中子视图的位置。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从实现方式来看：&lt;strong&gt;组合控件的一般需要加载一个已经写好的布局，声明方法来控制布局中写好的控件,不需要自己处理viewgroup的测量和布局的过程，比如自定义的App顶栏等。而自定义viewgroup一般是通过measure和layout来控制子view的位置，比如流式布局等。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;###2.ViewGroup概述&lt;/p&gt;
&lt;p&gt;A ViewGroup is a special view that can contain other views (called children.) The view group is the base class for layouts and views containers. This class also defines the ViewGroup.LayoutParams class which serves as the base class for layouts parameters. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个ViewGroup是一个可以包含其他view的特殊View，ViewGroup是各个Layout和View容器组件的基类。这个类还定义了ViewGroup.LayoutParams类来作为布局参数的基类。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;LayoutParams are used by views to tell their parents how they want to be laid out.&lt;br&gt;The base LayoutParams class just describes how big the view wants to be for both width and height.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LayoutParams 通常是子view用来告诉父容器他们的位置。基类LayoutParams 仅仅描述了子view的宽和高。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;###3.ViewGroup和LayoutParams之间的关系&lt;/p&gt;
&lt;p&gt;不知道大家有没有注意到，当我们在LinearLayout中写子View的时候，可以用layout_gravity，layout_weight属性；而zaiRelativeLayout中的子View有layout_centerInParent属性，却没有layout_gravity，layout_weight，这是为什么呢？&lt;strong&gt;这是因为每个ViewGroup需要指定一个LayoutParams，用于确定支持子View哪些属性。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;###4.Android绘制视图的方式&lt;br&gt;Layout is a two pass process: a measure pass and a layout pass. The measuring pass is implemented in measure(int, int) and is a top-down traversal of the view tree. Each view pushes dimension specifications down the tree during the recursion. At the end of the measure pass, every view has stored its measurements. The second pass happens in layout(int, int, int, int) and is also top-down. During this pass each parent is responsible for positioning all of its children using the sizes computed in the measure pass. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;绘制布局由两个遍历过程组成： 测量过程和布局过程。 测量过程由 measure(int, int) 方法完成， 该方法从上到下遍历视图树。 在递归遍历过程中， 每个视图都会向下层传递尺寸和规格。 当measure 方法遍历结束， 每个视图都保存了各自的尺寸信息。 第二个过程由 layout(int, int, int,int) 方法完成， 该方法也是由上而下遍历视图树， 在遍历过程中， 每个父视图通过测量过程的结果定位所有子视图的位置信息。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;###5.自定义viewgroup的步骤&lt;/p&gt;
&lt;p&gt;我们以官方文档中的demo为例。这是一个相对综合的例子，处理的几乎所有的布局情况。通过这个demo我们可以举一反三，把特殊情况简单。先看下效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160405181247461&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;实现效果：&lt;strong&gt;自定义类继承viewgroup实现linearlayout横向摆放的效果，并且自定义属性“layout_position”来控制子view在水平方向的位置。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;####自定义类继承ViewGroup，并初始化&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@RemoteViews.RemoteView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class CustomLayout extends ViewGroup &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /** The amount of space used by children in the left gutter. */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private int mLeftWidth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /** The amount of space used by children in the right gutter.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 计算右侧的子view需要的空间。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private int mRightWidth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /** These are used for computing child frames based on their gravity.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 计算子view基于他们gravity的画面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private final Rect mTmpContainerRect = new Rect();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private final Rect mTmpChildRect = new Rect();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public CustomLayout(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public CustomLayout(Context context, AttributeSet attrs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this(context, attrs, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public CustomLayout(Context context, AttributeSet attrs, int defStyle) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super(context, attrs, defStyle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;这里需要注意的一点是，如果我们自定义的viewgroup不需要滚动的话，尽量重写shouldDelayChildPressedState方法，并返回false。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Return true if the pressed state should be delayed for children or descendants of this ViewGroup. Generally, this should be done for containers that can scroll, such as a List. This prevents the pressed state from appearing when the user is actually trying to scroll the content. The default implementation returns true for compatibility reasons. Subclasses that do not scroll should generally override this method and return false. &lt;/p&gt;
&lt;p&gt;官方文档中的说明是，&lt;strong&gt;当返回false的时候，如果用户试图滚动内容，会阻止这个viewgroup出现按压状态。出于兼容的目的，这个方法默认是返回true的。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Any layout manager that doesn&amp;apos;t scroll will want this.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public boolean shouldDelayChildPressedState() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;####为子视图添加自定义属性&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;declare-styleable name=&amp;quot;CustomLayoutLP&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;attr name=&amp;quot;android:layout_gravity&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;attr name=&amp;quot;layout_position&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;enum name=&amp;quot;middle&amp;quot; value=&amp;quot;0&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;enum name=&amp;quot;left&amp;quot; value=&amp;quot;1&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;enum name=&amp;quot;right&amp;quot; value=&amp;quot;2&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/attr&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/declare-styleable&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;因为属性名的前缀是layout_，没有包含一个视图属性，因此该属性会被添加到LayoutParams的属性表中。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同时，在onMeasure方法之前，要先创建一个自定义的LayoutParams，该类用于存储每个子视图的gravity和position。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * Custom per-child layout information.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 创建自定义 LayoutParams类， 该类用于保存每个子视图的信息（gravity,position）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   public static class LayoutParams extends MarginLayoutParams &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        * The gravity to apply with the View to which these layout parameters&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        * are associated.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       public int gravity = Gravity.TOP | Gravity.START;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       public static int POSITION_MIDDLE = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       public static int POSITION_LEFT = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       public static int POSITION_RIGHT = 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       public int position = POSITION_MIDDLE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       public LayoutParams(Context c, AttributeSet attrs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           super(c, attrs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           // Pull the layout param values from the layout XML during&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           // inflation.  This is not needed if you don&amp;apos;t care about&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           // changing the layout behavior in XML.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           TypedArray a = c.obtainStyledAttributes(attrs, R.styleable.CustomLayoutLP);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           gravity = a.getInt(R.styleable.CustomLayoutLP_android_layout_gravity, gravity);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           position = a.getInt(R.styleable.CustomLayoutLP_layout_position, position);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           a.recycle();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       public LayoutParams(int width, int height) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           super(width, height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       public LayoutParams(ViewGroup.LayoutParams source) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           super(source);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;要使用新定义的layoutparams，我们可能需要重写的方法为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// The rest of the implementation is for custom per-child layout parameters.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // If you do not need these (for example you are writing a layout manager&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // that does fixed positioning of its children), you can drop all of this.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public LayoutParams generateLayoutParams(AttributeSet attrs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return new CustomLayout.LayoutParams(getContext(), attrs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected LayoutParams generateDefaultLayoutParams() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams p) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return new LayoutParams(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected boolean checkLayoutParams(ViewGroup.LayoutParams p) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return p instanceof LayoutParams;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是从注释中我们了解到：&lt;strong&gt;如果我们用不到这些方法，比如我们的viewgroup中的子view是固定的，那么我们可以丢掉他们。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;####重写onMeasure（）方法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * Ask all children to measure themselves and compute the measurement of this&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * layout based on the children.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 令每个子视图测量自身，计算该viewgroup基于子view的尺寸&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int count = getChildCount();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // These keep track of the space we are using on the left and right for&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // views positioned there; we need member variables so we can also use&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // these for layout later.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mLeftWidth = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mRightWidth = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Measurement will ultimately be computing these values.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //使用宽和高计算布局的最终大小&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int maxHeight = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int maxWidth = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int childState = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Iterate through all children, measuring them and computing our dimensions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // from their size.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //遍历所有的孩子,从他们的大小测量和计算我们的大小&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (int i = 0; i &amp;lt; count; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            final View child = getChildAt(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (child.getVisibility() != GONE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // Measure the child.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //令每个子视图测量自身&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                measureChildWithMargins(child, widthMeasureSpec, 0, heightMeasureSpec, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // Update our size information based on the layout params.  Children&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // that asked to be positioned on the left or right go in those gutters.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                final LayoutParams lp = (LayoutParams) child.getLayoutParams();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (lp.position == LayoutParams.POSITION_LEFT) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mLeftWidth += Math.max(maxWidth,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; else if (lp.position == LayoutParams.POSITION_RIGHT) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mRightWidth += Math.max(maxWidth,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    maxWidth = Math.max(maxWidth,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                maxHeight = Math.max(maxHeight,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                childState = combineMeasuredStates(childState, child.getMeasuredState());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Total width is the maximum width of all inner children plus the gutters.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        maxWidth += mLeftWidth + mRightWidth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Check against our minimum height and width&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        maxHeight = Math.max(maxHeight, getSuggestedMinimumHeight());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        maxWidth = Math.max(maxWidth, getSuggestedMinimumWidth());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Report our final dimensions.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //使用计算的到的宽和高设置整个布局的测量尺寸&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                resolveSizeAndState(maxHeight, heightMeasureSpec,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        childState &amp;lt;&amp;lt; MEASURED_HEIGHT_STATE_SHIFT));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;####最后一步为onLayout（）方法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * Position all children within this layout.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected void onLayout(boolean changed, int left, int top, int right, int bottom) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final int count = getChildCount();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // These are the far left and right edges in which we are performing layout.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int leftPos = getPaddingLeft();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int rightPos = right - left - getPaddingRight();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // This is the middle region inside of the gutter.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final int middleLeft = leftPos + mLeftWidth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final int middleRight = rightPos - mRightWidth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // These are the top and bottom edges in which we are performing layout.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final int parentTop = getPaddingTop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final int parentBottom = bottom - top - getPaddingBottom();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (int i = 0; i &amp;lt; count; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            final View child = getChildAt(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (child.getVisibility() != GONE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                final LayoutParams lp = (LayoutParams) child.getLayoutParams();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                final int width = child.getMeasuredWidth();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                final int height = child.getMeasuredHeight();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // Compute the frame in which we are placing this child.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (lp.position == LayoutParams.POSITION_LEFT) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mTmpContainerRect.left = leftPos + lp.leftMargin;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mTmpContainerRect.right = leftPos + width + lp.rightMargin;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    leftPos = mTmpContainerRect.right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; else if (lp.position == LayoutParams.POSITION_RIGHT) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mTmpContainerRect.right = rightPos - lp.rightMargin;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mTmpContainerRect.left = rightPos - width - lp.leftMargin;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    rightPos = mTmpContainerRect.left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mTmpContainerRect.left = middleLeft + lp.leftMargin;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mTmpContainerRect.right = middleRight - lp.rightMargin;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mTmpContainerRect.top = parentTop + lp.topMargin;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mTmpContainerRect.bottom = parentBottom - lp.bottomMargin;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // Use the child&amp;apos;s gravity and size to determine its final&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // frame within its container.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Gravity.apply(lp.gravity, width, height, mTmpContainerRect, mTmpChildRect);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // Place the child.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //放置子view&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                child.layout(mTmpChildRect.left, mTmpChildRect.top,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        mTmpChildRect.right, mTmpChildRect.bottom);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述逻辑并不复杂，循环调用子view的onlayout方法，根据onMeasure的到的参数对子view进行布局。&lt;/p&gt;
&lt;p&gt;####在布局文件中使用&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;oracleen.customlayout.CustomLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xmlns:app=&amp;quot;http://schemas.android.com/apk/res-auto&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_height=&amp;quot;match_parent&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- put first view to left. --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;TextView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_gravity=&amp;quot;fill_vertical|center_horizontal&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:background=&amp;quot;@color/test1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:text=&amp;quot;l1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        app:layout_position=&amp;quot;left&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- stack second view to left. --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;TextView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_gravity=&amp;quot;fill_vertical|center_horizontal&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:background=&amp;quot;@color/test1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:text=&amp;quot;l2&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        app:layout_position=&amp;quot;left&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- also put a view on the right. --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;TextView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_gravity=&amp;quot;fill_vertical|center_horizontal&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:background=&amp;quot;@color/test1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:text=&amp;quot;r1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        app:layout_position=&amp;quot;right&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- by default views go in the middle; use fill vertical gravity --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;TextView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_gravity=&amp;quot;fill_vertical|center_horizontal&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:background=&amp;quot;@color/test2&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:text=&amp;quot;fill-vert&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- by default views go in the middle; use fill horizontal gravity --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;TextView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&amp;quot;30dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_gravity=&amp;quot;center_vertical|fill_horizontal&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:background=&amp;quot;@color/test2&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:text=&amp;quot;fill-horiz&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- by default views go in the middle; use top-left gravity --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;TextView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_gravity=&amp;quot;top|left&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:background=&amp;quot;@color/test3&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:text=&amp;quot;top-left&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- by default views go in the middle; use center gravity --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;TextView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_gravity=&amp;quot;center&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:background=&amp;quot;@color/test3&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:text=&amp;quot;center&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- by default views go in the middle; use bottom-right --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;TextView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_gravity=&amp;quot;bottom|right&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:background=&amp;quot;@color/test3&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:text=&amp;quot;bottom-right&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/oracleen.customlayout.CustomLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;好，到这里基本就结束了。源码我也上传了，大部分方法都加了注释，&lt;a href=&quot;http://download.csdn.net/detail/sdkfjksf/9482002&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击这里下载。&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;自定义类继承ViewGroup。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="自定义控件" scheme="http://yoursite.com/categories/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
    
      <category term="自定义控件" scheme="http://yoursite.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
      <category term="官方demo" scheme="http://yoursite.com/tags/%E5%AE%98%E6%96%B9demo/"/>
    
      <category term="ViewGroup" scheme="http://yoursite.com/tags/ViewGroup/"/>
    
  </entry>
  
  <entry>
    <title>Material Design实战</title>
    <link href="http://yoursite.com/2016/03/29/Material%20Design%E5%AE%9E%E6%88%98/"/>
    <id>http://yoursite.com/2016/03/29/Material Design实战/</id>
    <published>2016-03-29T10:24:00.000Z</published>
    <updated>2016-05-07T04:46:53.221Z</updated>
    
    <content type="html">&lt;p&gt;MaterialDesign实战。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;记得最早接触MaterialDesign还是在去年我刚自学android的时候，当时迫切的想尝试一下这种新的设计语言，但由于一些原因搁浅到现在。趁这个机会写个小demo，感受一下这种设计语言的魅力。先来看下效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160331170922504&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个demo主要实现了：Material design的设计风格，Toolbar制作顶栏，RecyclerView制作列表。&lt;/p&gt;
&lt;p&gt;主要用到的知识点：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.Material design基本知识；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.Toolbar的用法；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.RecyclerView的基本用法；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后说下具体的实现思路。&lt;/p&gt;
&lt;p&gt;##Material design&lt;/p&gt;
&lt;p&gt;###什么是Material design？&lt;br&gt;We challenged ourselves to create a visual language for our users that synthesizes the classic principles of good design with the innovation and possibility of technology and science. This is material design. This spec is a living document that will be updated as we continue to develop the tenets and specifics of material design.&lt;/p&gt;
&lt;p&gt;从官方介绍里我们了解到，这是一门崭新的视觉设计语言。它除了遵循经典设计定则，还汲取了最新的科技，秉承了创新的设计理念。这就是材料化设计(Material Design)。&lt;/p&gt;
&lt;p&gt;###Material design的核心&lt;br&gt;Material design的核心思想，就是把物理世界的体验带进屏幕。去掉现实中的杂质和随机性，保留其最原始纯净的形态、空间关系、变化与过渡，配合虚拟世界的灵活特性，还原最贴近真实的体验，达到简洁与直观的效果。&lt;/p&gt;
&lt;p&gt;##创建使用Material design的应用&lt;/p&gt;
&lt;p&gt;###官方文档中的步骤&lt;br&gt;1.The material theme（使用materialdesign主题）&lt;br&gt;2.Widgets for cards and lists（使用列表和卡片组件）&lt;br&gt;3.Custom shadows and view clipping（定义shadows和clipping视图）&lt;br&gt;4.Vector drawables（矢量drawables）&lt;br&gt;5.Custom animations（自定义动画）&lt;/p&gt;
&lt;p&gt;###本demo的实现过程&lt;/p&gt;
&lt;p&gt;####使用materialdesign主题&lt;/p&gt;
&lt;p&gt;Material主题被定义在：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@android:style/Theme.Material (暗色版本)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@android:style/Theme.Material.Light (亮色版本)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@android:style/Theme.Material.Light.DarkActionBar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了使我们的应用可以兼容低版本，可以使用&lt;strong&gt;兼容主题&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Theme.AppCompat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Theme.AppCompat.Light&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Theme.AppCompat.Light.DarkActionBar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;关于主题，我们可以自定义调色板，反馈动画和 Activity 切换动画。同时XML layout 中的元素可以定义 android:theme 属性， 用于引用主题资源。这个属性修改了自己和子元素的主题，通过这个我们可以修改局部主题颜色。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里是我用的主题，是Pink色系。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!-- inherit from the material theme --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;style name=&amp;quot;MyTheme&amp;quot; parent=&amp;quot;Theme.AppCompat.Light.NoActionBar&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- Main theme colors --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!--   your app branding color for the app bar --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;item name=&amp;quot;android:colorPrimary&amp;quot;&amp;gt;@color/myColorPrimary&amp;lt;/item&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!--   darker variant for the status bar and contextual app bars --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;item name=&amp;quot;android:colorPrimaryDark&amp;quot;&amp;gt;@color/myColorPrimaryDark&amp;lt;/item&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!--   theme UI controls like checkboxes and text fields --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;item name=&amp;quot;android:colorAccent&amp;quot;&amp;gt;@color/myColorAccent&amp;lt;/item&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!--  textcolor  --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;item name=&amp;quot;android:textColor&amp;quot;&amp;gt;@color/myColorText&amp;lt;/item&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;AndroidStudio还提供了可视化操作的工具，用来设置这些颜色。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160331175022457&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;工具界面如下图，可以点击特定属性选择符合自己品牌的颜色。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160331175142895&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;####使用Toolbar&lt;br&gt;&lt;strong&gt;5.0以后使用了Toolbar这个控件来替换以前的ActionBar。并且提供了supprot library用于向下兼容。使用方法与ActionBar基本类似。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;隐藏ActionBar使用ToolBar有两种方法：&lt;/p&gt;
&lt;p&gt;1.继承主题：Theme.AppCompat.Light.NoActionBar&lt;/p&gt;
&lt;p&gt;2.在主题中使用以下属性：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;item name=&amp;quot;windowActionBar&amp;quot;&amp;gt;false&amp;lt;/item&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;item name=&amp;quot;android:windowNoTitle&amp;quot;&amp;gt;true&amp;lt;/item&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了兼容低版本，我们使用support v7 里的 toolbar。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;android.support.v7.widget.Toolbar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	android:id=&amp;quot;@+id/toolbar&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	android:layout_height=&amp;quot;55dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	android:background=&amp;quot;@color/myColorPrimary&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	android:elevation=&amp;quot;3dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	android:navigationIcon=&amp;quot;@mipmap/menu&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	android:title=&amp;quot;@string/app_name&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	app:titleTextColor=&amp;quot;@color/myColorText&amp;quot;&amp;gt;&amp;lt;/android.support.v7.widget.Toolbar&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后是一些基本的设置：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 初始化toolbar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private void initToolBar() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // App Logo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//        toolbar.setLogo(R.mipmap.logo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Title&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//        toolbar.setTitle(&amp;quot;WaKaKa&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Sub Title&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//        toolbar.setSubtitle(&amp;quot;Sub title&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        toolbar.setOverflowIcon(getResources().getDrawable(R.mipmap.more));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setSupportActionBar(toolbar);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //导航按钮&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        toolbar.setNavigationIcon(R.mipmap.menu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        toolbar.setNavigationOnClickListener(new View.OnClickListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            public void onClick(View v) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Toast.makeText(MainActivity.this, &amp;quot;Click navigation&amp;quot;, Toast.LENGTH_SHORT).show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        toolbar.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            public boolean onMenuItemClick(MenuItem item) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                String msg = &amp;quot;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                switch (item.getItemId()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    case R.id.action_delete:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        msg += &amp;quot;Click delete&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    case R.id.action_favorite:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        msg += &amp;quot;Click favorite&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    case R.id.action_settings:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        msg += &amp;quot;Click settings&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (!msg.equals(&amp;quot;&amp;quot;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    Toast.makeText(MainActivity.this, msg, Toast.LENGTH_SHORT).show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;要注意的是setNavigationIcon需要放在 setSupportActionBar之后才会生效。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个demo中的图标大部分是从谷歌官方制作的icon中下载的。&lt;/p&gt;
&lt;p&gt;####使用RecycleView&lt;br&gt; RecycleView组件是一个更高级和伸缩性更强的 ListView。这个组件是一个显示大量数据的容器，通过维护有限量的View，来达到滚动时的高效。当你的数据会在运行过程中根据用户行为或网络事件动态改变时，使用RecyclerView是一个不错的选择。&lt;/p&gt;
&lt;p&gt;RecyclerView 通过以下方式简化显示流程，并操作大量数据：&lt;/p&gt;
&lt;p&gt;1.使用 Layout manager 来定位元素&lt;/p&gt;
&lt;p&gt;2.为常用操作定义默认动画，比如添加或移除元素&lt;/p&gt;
&lt;p&gt;你也可以为 RecyclerView 自定义 Layout manager 和动画。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;要使用 RecyclerView 组件，你需要定义一个 adapter 和 layout manager。&lt;/strong&gt;创建 adapter，要继承 RecyclerView.Adapter 类。Layout manager把元素视图放在 RecyclerView，并决定什么时候重用不可见的元素视图。要重用（或回收）视图时，layout manager 会让 adapter 用另外的元素内容替换视图内的内容。回收 View 这个方法能提高性能，因为它避免了创建不必要的view对象，或执行昂贵的 findViewById() 查找。RecyclerView 提供三种内建的 layout manager:LinearLayoutManager 用于显示横向或纵向的滚动列表；GridLayoutManager 用于显示方格元素；StaggeredGridLayoutManager 在 staggered 方格中显示元素。创建一个自定义的 layout manager，要继承于 RecyclerView.LayoutManager 类。&lt;/p&gt;
&lt;p&gt;在xml文件中使用RecyclerView之后，初始化：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;private void initRecyclerView() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mRecyclerView = (RecyclerView) findViewById(R.id.recycleview);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // use this setting to improve performance if you know that changes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // in content do not change the layout size of the RecyclerView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mRecyclerView.setHasFixedSize(true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // use a linear layout manager&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mLayoutManager = new LinearLayoutManager(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mRecyclerView.setLayoutManager(mLayoutManager);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //set divider&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mRecyclerView.addItemDecoration(new MyItemDecoration(MainActivity.this));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // specify an adapter (see also next example)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String[] myDataset = &amp;#123;&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;e&amp;quot;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mAdapter = new MyAdapter(myDataset);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mRecyclerView.setAdapter(mAdapter);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mAdapter.setOnItemClickListener(new MyAdapter.OnItemClickListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            public void onItemClick(View view, int position) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Toast.makeText(MainActivity.this, position + &amp;quot;&amp;quot;, Toast.LENGTH_SHORT).show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;适配器的代码和使用listview大同小异：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class MyAdapter extends RecyclerView.Adapter&amp;lt;MyAdapter.ViewHolder&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private String[] mDataset;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private OnItemClickListener listener;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Provide a reference to the views for each data item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Complex data items may need more than one view per item, and&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // you provide access to all the views for a data item in a view holder&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public class ViewHolder extends RecyclerView.ViewHolder &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // each data item is just a string in this case&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public TextView mTitle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public RelativeLayout root;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public ViewHolder(View v) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            super(v);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mTitle = (TextView) v.findViewById(R.id.item_title);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            root = (RelativeLayout) v.findViewById(R.id.item_rl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Provide a suitable constructor (depends on the kind of dataset)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public MyAdapter(String[] myDataset) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mDataset = myDataset;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Create new views (invoked by the layout manager)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public MyAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // create a new view&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.my_item_view, parent, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // set the view&amp;apos;s size, margins, paddings and layout parameters&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ViewHolder vh = new ViewHolder(v);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return vh;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Replace the contents of a view (invoked by the layout manager)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void onBindViewHolder(ViewHolder holder, final int position) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // - get element from your dataset at this position&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // - replace the contents of the view with that element&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        holder.mTitle.setText(mDataset[position]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if(listener != null)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            holder.root.setOnClickListener(new View.OnClickListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                public void onClick(View v) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    listener.onItemClick(v,position);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Return the size of your dataset (invoked by the layout manager)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public int getItemCount() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return mDataset.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public interface OnItemClickListener &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        void onItemClick(View view, int position);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void setOnItemClickListener(OnItemClickListener listener) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.listener = listener;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的两个比较大的问题是：&lt;/p&gt;
&lt;p&gt;1.RecyclerView的分割线要自己定义。&lt;/p&gt;
&lt;p&gt;2.RecyclerView Item的点击事件和长按事件都要自己定义。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对于第一个问题我们需要去继承RecyclerView.ItemDecoration类，在里边绘制分割线。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 绘制item分割线&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class MyItemDecoration extends RecyclerView.ItemDecoration &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static final int[] ATTRS = new int[]&amp;#123;android.R.attr.listDivider&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private Drawable mDivider;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public MyItemDecoration(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final TypedArray array = context.obtainStyledAttributes(ATTRS);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mDivider = array.getDrawable(0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        array.recycle();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void onDraw(Canvas c, RecyclerView parent, RecyclerView.State state) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        drawHorizontal(c,parent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 水平线&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void drawHorizontal(Canvas c, RecyclerView parent) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final int childCount = parent.getChildCount();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 在每一个子控件的底部画线&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (int i = 0; i &amp;lt; childCount; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            final View child = parent.getChildAt(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            final int left = child.getLeft() + child.getPaddingLeft();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            final int right = child.getWidth() + child.getLeft() - child.getPaddingRight();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            final int top = child.getBottom() - mDivider.getIntrinsicHeight() - child.getPaddingBottom();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            final int bottom = top + mDivider.getIntrinsicHeight();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mDivider.setBounds(left, top, right, bottom);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mDivider.draw(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void getItemOffsets(Rect outRect, int itemPosition, RecyclerView parent) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        outRect.set(0, 0, 0, mDivider.getIntrinsicHeight());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;对于第二个问题，我们可以写一个回调方法，来设置点击事件，长按事件类似。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public interface OnItemClickListener &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  void onItemClick(View view, int position);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; public void setOnItemClickListener(OnItemClickListener listener) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     this.listener = listener;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在onBindViewHolder中使用接口对象处理点击事件。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if(listener != null)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; holder.root.setOnClickListener(new View.OnClickListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       public void onClick(View v) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           listener.onItemClick(v,position);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在activity中进行设置&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mAdapter.setOnItemClickListener(new MyAdapter.OnItemClickListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            public void onItemClick(View view, int position) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Toast.makeText(MainActivity.this, position + &amp;quot;&amp;quot;, Toast.LENGTH_SHORT).show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到这里基本就完成了，这个demo可以在低版本中运行，但是5.0的新特性是不会显示的。&lt;a href=&quot;http://download.csdn.net/detail/sdkfjksf/9478304&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源码戳这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考链接：&lt;br&gt;Material icon &lt;a href=&quot;https://design.google.com/icons/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://design.google.com/icons/&lt;/a&gt;&lt;br&gt;MaterialDesign官方介绍：&lt;a href=&quot;https://www.google.com/design/spec/material-design/introduction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.google.com/design/spec/material-design/introduction.html&lt;/a&gt;&lt;br&gt;Training：&lt;a href=&quot;http://developer.android.com/training/material/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/training/material/index.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;MaterialDesign实战。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="MaterialDesign" scheme="http://yoursite.com/categories/MaterialDesign/"/>
    
    
      <category term="MaterialDesign" scheme="http://yoursite.com/tags/MaterialDesign/"/>
    
      <category term="Toolbar" scheme="http://yoursite.com/tags/Toolbar/"/>
    
      <category term="RecyclerView" scheme="http://yoursite.com/tags/RecyclerView/"/>
    
  </entry>
  
  <entry>
    <title>Android性能优化之渲染优化的8个点</title>
    <link href="http://yoursite.com/2016/03/28/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E6%B8%B2%E6%9F%93%E4%BC%98%E5%8C%96%E7%9A%848%E4%B8%AA%E7%82%B9/"/>
    <id>http://yoursite.com/2016/03/28/Android性能优化之渲染优化的8个点/</id>
    <published>2016-03-28T10:26:00.000Z</published>
    <updated>2016-05-07T04:44:55.719Z</updated>
    
    <content type="html">&lt;p&gt;Android性能优化之渲染优化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
###1.渲染性能分析&lt;br&gt;大多数手机的屏幕刷新频率是60hz，如果在1000/60=16.67ms内没有办法把这一帧的任务执行完毕，系统将放弃这一帧，即发生丢帧的现象。在动画中出现一个丢弃帧会在平滑的体验中看到一个跳跃，用户可以很容易看出来。丢帧越多，用户感受到的卡顿情况就越严重。&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160328215418351&quot; alt=&quot;&quot;&gt;&lt;br&gt;如图某个时候我们需要用34ms的时间去更新UI，这是用户就会感觉到卡顿。&lt;br&gt;###2.渲染性能低的原因&lt;br&gt;那么都有哪些情况可能我们不能再16ms的时间内完成呢？&lt;br&gt;1.花了太多时间去重绘大量的视图层次（View hierarchy），这是很浪费CPU周期的。&lt;br&gt;2.绘制了太多的对象，在像素着色上浪费了宝贵的时间，然而这些对象对最终用户而言都是不可见的。&lt;br&gt;3.一遍又一遍的在做大量的动画，这会导致CPU和GPU产生大量的工作。&lt;br&gt;###3.CPU和GPU&lt;br&gt;渲染操作通常依赖于两个核心组件：CPU与GPU。CPU负责包括Measure，Layout，Record，Execute的计算操作，GPU负责Rasterization(栅格化)操作。Resterization栅格化是绘制那些Button，Shape，Path，String，Bitmap等组件最基础的操作。它把那些组件拆分到不同的像素上进行显示。这是一个很费时的操作，GPU的引入就是为了加快栅格化的操作。CPU负责把UI组件计算成Polygons，Texture纹理，然后交给GPU进行栅格化渲染。&lt;br&gt;###4.GPU性能问题: 过度重绘（Overdraw）&lt;br&gt;Overdraw(过度绘制)描述的是屏幕上的某个像素在同一帧的时间内被绘制了多次。在多层次重叠的UI结构里面，如果不可见的UI也在做绘制的操作，会导致某些像素区域被绘制了多次。这样就会浪费大量的CPU以及GPU资源。&lt;br&gt;###5.检测过度重绘的工具&lt;br&gt;我们可以通过手机设置里面的开发者选项，打开调试GPU过度绘制的选项。&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160328221353687&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;br&gt;蓝色，淡绿，淡红，深红代表了4种不同程度的Overdraw情况，我们的目标就是尽量减少红色Overdraw，看到更多的蓝色区域。&lt;br&gt;###6.GridView，ListView等如何减少过度绘制&lt;br&gt;1.移除Window默认的Background&lt;br&gt;2.移除XML布局文件中非必需的Background&lt;br&gt;3.按需显示占位背景图片&lt;br&gt;###7.自定义View如何减少过度绘制&lt;br&gt;我们可以通过canvas.clipRect()来帮助系统识别那些可见的区域。这个方法可以指定一块矩形区域，只有在这个区域内才会被绘制，其他的区域会被忽视。这个API可以很好的帮助那些有多组重叠组件的自定义View来控制显示的区域。同时clipRect方法还可以帮助节约CPU与GPU资源，在clipRect区域之外的绘制指令都不会被执行，那些部分内容在矩形区域内的组件，仍然会得到绘制。除了clipRect方法之外，我们还可以使用canvas.quickreject()来判断是否没和某个矩形相交，从而跳过那些非矩形区域内的绘制操作。&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160328222257357&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;br&gt;###8.让onDraw方法保持干净&lt;br&gt;View的onDraw方法要避免执行大量的操作，主要指两个方面。&lt;br&gt;1.onDraw中不要穿件新的局部变量，因为onDraw方法可能会被频繁调用。&lt;br&gt;2.onDraw方法中不要做耗时的操作，也不要执行过多的循环操作，否则很难保证每帧的绘制时间不超过16ms。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Android性能优化之渲染优化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="性能优化" scheme="http://yoursite.com/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="性能优化" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="渲染优化" scheme="http://yoursite.com/tags/%E6%B8%B2%E6%9F%93%E4%BC%98%E5%8C%96/"/>
    
      <category term="CPU和GPU" scheme="http://yoursite.com/tags/CPU%E5%92%8CGPU/"/>
    
      <category term="Overdraw" scheme="http://yoursite.com/tags/Overdraw/"/>
    
  </entry>
  
  <entry>
    <title>Android性能优化之工具篇</title>
    <link href="http://yoursite.com/2016/03/22/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E5%B7%A5%E5%85%B7%E7%AF%87/"/>
    <id>http://yoursite.com/2016/03/22/Android性能优化之工具篇/</id>
    <published>2016-03-22T10:00:00.000Z</published>
    <updated>2016-05-07T04:43:05.885Z</updated>
    
    <content type="html">&lt;p&gt;Android性能优化之工具篇。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
“哈哈，bug改完啦，准备准备上线了，好开心！”这句话简直喜闻乐见，我自己也没少说，但我想说的是，我们的App真的可以了么？也许在我们没有注意到的地方，还有许多问题在潜伏着，等待着上线后破土而出。出于求稳的目的，我用lint工具检测了一番，炸了，5000+条需要优化的地方，哭的心都有了。所以这个故事告诉我们：&lt;strong&gt;永远不要认为自己的App没毛病&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;言归正传，在上一篇博客中跟大家分享了AndroidUI优化中的布局优化，今天就做一个补充。工欲善其事，必先利其器，想要做好Android优化，准备几把好刀并不过分吧，接下来就跟大家分享下Android开发中UI优化相关的几个利器。&lt;/p&gt;
&lt;p&gt;The Android SDK includes a variety of tools that help you develop mobile applications for the Android platform. The tools are classified into two groups: SDK tools and platform tools. SDK tools are platform independent and are required no matter which Android platform you are developing on. Platform tools are customized to support the features of the latest Android platform.&lt;/p&gt;
&lt;p&gt;以上是官方文档中关于开发工具的概述，&lt;strong&gt;Android SDK包含了许多工具来帮助我们开发Android App，这些工具呢大概分为两类：SDK工具和平台工具。SDK工具是独立于平台之外的，而平台工具是为了支持最新的Android开发平台而定制的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;今天我们来看一下SDK工具中比较实用的有关UI优化的两个开发工具，&lt;strong&gt;Hierarchy Viewer (hierarchyviewer)和lint&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;##Hierarchy Viewer (hierarchyviewer)&lt;/p&gt;
&lt;p&gt;####概述&lt;br&gt;&lt;strong&gt;Hierarchy Viewer是我们的布局文件的层级结构变的可见，并且在每一个节点标注此节点的性能相关的信息。通过此工具可以详细的理解当前界面的控件布局以及某个控件的属性（name、id、height等）。同时，我们可以借助Hierarchy Viewer学习别人优秀的布局方式，也能更深入更全面更整体的把握xml布局文件。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;####使用方法&lt;br&gt;1.连接设备真机或者模拟器；&lt;/p&gt;
&lt;p&gt;2.启动你要观察的应用（真机可能无法连接，我用的小米4，连接上了，没读到内容，如下图）；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160322182907244&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;3.Androidstudio中启动Hierarchy Viewer的方式如图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160322183209649&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后点击&lt;img src=&quot;http://img.blog.csdn.net/20160322183319917&quot; alt=&quot;这里写图片描述&quot;&gt;   &lt;/p&gt;
&lt;p&gt;选择Hierarchy Viewer。&lt;/p&gt;
&lt;p&gt;4.然后选中我们要查看的进程，等待加载完毕。&lt;/p&gt;
&lt;p&gt;####详细说明&lt;br&gt;加载完成后效果如图，这张图是&lt;a href=&quot;http://blog.csdn.net/sdkfjksf/article/details/50888655&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;小火箭&lt;/a&gt;的界面的view树。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160322225553738&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;观察单个view，选择单个view后会出现如下图所示图形。这里会看到Measure、Layout、Draw的耗时。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160322225918710&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们看一下官网对应的介绍&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160323090402754&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;看小火箭的view层级结构图，35views表明这个framelayout下包含35个子控件了。而下方的带颜色的三个圆圈指示灯，分别说明了在测量(measure)、布局(layout)以及画视图(draw)三个阶段，这个控件所占用的时间百分比，如果是绿色的，表示该控件在该阶段比起其他的50%的控件的速度要快，为黄色的表示比起其他的50%的控件的速度要慢，为红色的则表示该控件在该阶段的处理速度是最慢的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;要注意的是，在Hierarchy Viewer中，当修改了界面后，需要手工点Refresh按钮，才能同步在Hierarchy Viewer中显示更新过后的界面情况。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;##lint&lt;/p&gt;
&lt;p&gt;####概述&lt;br&gt;&lt;strong&gt;Android中的lint，是一个静态代码分析工具，它可以帮助我们检测我们项目中的资源文件中的潜在bug，并且提供最优的改进方案。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The lint tool checks your Android project source files for potential bugs and optimization improvements for correctness, security, performance, usability, accessibility, and internationalization. You can run lint from the command-line or from Android Studio.&lt;/p&gt;
&lt;p&gt;通过看官方文档我们了解到，lint可以帮我们做检查资源文件，并且提高app的正确性，安全性，性能，实用性以及国际化等。我们可以&lt;strong&gt;通过命令行或者直接在Androidstudio中使用lint&lt;/strong&gt;来扫描我们的app。&lt;/p&gt;
&lt;p&gt;####功能&lt;br&gt;1.布局性能&lt;br&gt;2.未使用到资源&lt;br&gt;3.不一致的数组大小&lt;br&gt;4.国际化问题（硬编码）&lt;br&gt;5.图标的问题（重复的图标，错误的大小）&lt;br&gt;6.可用性问题（如不指定的文本字段的输入型）&lt;br&gt;7.manifest文件以及gradle文件的错误&lt;/p&gt;
&lt;p&gt;####在AndroidStudio中的使用&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160322174052054&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;如图所示，找到Analyze，点击Inspect Code，然后弹出一个选择范围的对话框&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160322174214554&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里我们使用默认的整个工程。然后看下结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160322174954104&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;左边显示的是检测到的所有问题，点击某个节点，右边会显示对应的详细信息。比如我这张图中显示的是避免使用小于12sp的单位，因为谷歌官方是不推荐使用小于12sp的单位的。&lt;/p&gt;
&lt;p&gt;这里只是简单介绍下lint的应用，我们&lt;strong&gt;还可以在Androidstudio中设置link的偏好，配置lint.xml文件，配置lint检测java和xml布局文件。&lt;/strong&gt;具体可以参照官方文档操作，&lt;a href=&quot;http://developer.android.com/tools/debugging/improving-w-lint.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;戳这里。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考连接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/tools/debugging/debugging-ui.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/tools/debugging/debugging-ui.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/tools/debugging/improving-w-lint.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/tools/debugging/improving-w-lint.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Android性能优化之工具篇。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="性能优化" scheme="http://yoursite.com/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="性能优化工具" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B7%A5%E5%85%B7/"/>
    
      <category term="hierarchyviewer" scheme="http://yoursite.com/tags/hierarchyviewer/"/>
    
      <category term="lint" scheme="http://yoursite.com/tags/lint/"/>
    
  </entry>
  
  <entry>
    <title>AndrodUI优化之布局优化</title>
    <link href="http://yoursite.com/2016/03/20/AndrodUI%E4%BC%98%E5%8C%96%E4%B9%8B%E5%B8%83%E5%B1%80%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2016/03/20/AndrodUI优化之布局优化/</id>
    <published>2016-03-20T14:26:00.000Z</published>
    <updated>2016-05-07T04:41:40.461Z</updated>
    
    <content type="html">&lt;p&gt;AndroidUI优化之布局优化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前些天在&lt;a href=&quot;http://blog.csdn.net/sdkfjksf/article/details/50839296&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; 那些年大家都在谈论的Android性能优化 &lt;/a&gt;中已经跟大家分享了Android中性能优化的概念，优化的一些关键点以及优化方案。今天跟大家探讨一下AndroidUI优化中的布局优化具体是怎么操作的。&lt;/p&gt;
&lt;p&gt;###选择合适的ViewGroup&lt;br&gt;1.FrameLayout和LinearLayout是Android中比较简单并且高效的viewgroup，如果不考虑布局嵌套的话，尽量使用这两种。&lt;br&gt;2.大多数情况单纯使用FrameLayout或者LinearLayout无法实现产品效果，需要进行布局嵌套，这种情况尽量使用RelativeLayout。嵌套会增加布局的层级，降低App的性能。大约在Android4.0之后，新建工程的默认main.xml中顶节点改成了RelativeLayout，因为RelativeLayout性能更优，可以简单实现LinearLayout嵌套才能实现的布局。&lt;/p&gt;
&lt;p&gt;###抽象布局标签&lt;/p&gt;
&lt;p&gt;####include&lt;br&gt;include主要用于布局重用，将布局中的公共部分抽离出来供其他布局用，实现布局的模块化，比如App的顶栏等。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_height=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:orientation=&amp;quot;vertical&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;include&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:id=&amp;quot;@+id/title&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        layout=&amp;quot;@layout/layout_title&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;android.support.v4.view.ViewPager&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:id=&amp;quot;@+id/fragment_home_viewpager&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&amp;quot;match_parent&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;include标签唯一需要的属性是layout属性，指定需要包含的布局文件。可以定义android:id和android:layout&lt;em&gt;*属性来覆盖被引入布局根节点的对应属性值。注意重新定义android:id后，子布局的顶结点id就变化了。如果被指定了android:layout&lt;/em&gt;&lt;em&gt;属性，那么android:layout_width和android:layout&lt;em&gt;height也必须存在，否则其他android:layout&lt;/em&gt;&lt;/em&gt;属性不生效。&lt;/p&gt;
&lt;p&gt;####merge&lt;br&gt;merge标签一般和include标签一起使用，可以减少布局的层级。假如我的layout_title文件中的根节点也是竖直方向的linearlayout，我们可以通过merge标签来减少这一层linearlayout。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;merge xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;Button&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:id=&amp;quot;@+id/back&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&amp;quot;wrap_content&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;Button&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:id=&amp;quot;@+id/menu&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&amp;quot;wrap_content&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/merge&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另一种情况是当布局顶结点是FrameLayout且不需要设置background或padding等属性，可以用merge代替，因为Activity内容视图的parent view就是个FrameLayout，所以可以用merge消除只剩一个。&lt;/p&gt;
&lt;p&gt;####viewstub&lt;br&gt;viewstub引入的布局默认不会扩张，即既不会占用显示也不会占用位置，不参与任何的布局和绘制过程，从而在解析layout时节省cpu和内存。它的意义在于按需加载布局文件，比如网络异常的界面正常情况下是不会显示的，我们就没有必要在初始化的时候就把它加载进来。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_height=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:orientation=&amp;quot;vertical&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;include&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:id=&amp;quot;@+id/title&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        layout=&amp;quot;@layout/layout_title&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;android.support.v4.view.ViewPager&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:id=&amp;quot;@+id/fragment_home_viewpager&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&amp;quot;match_parent&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;ViewStub&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:id=&amp;quot;@+id/network_error_layout&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout=&amp;quot;@layout/network_error&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;network_error的内容&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;RelativeLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_height=&amp;quot;match_parent&amp;quot; &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;Button&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:id=&amp;quot;@+id/network_setting&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&amp;quot;160dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_centerHorizontal=&amp;quot;true&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:text=&amp;quot;@string/network_setting&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;Button&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:id=&amp;quot;@+id/network_refresh&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&amp;quot;160dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_below=&amp;quot;@+id/network_setting&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_centerHorizontal=&amp;quot;true&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_marginTop=&amp;quot;@dimen/dp_10&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:text=&amp;quot;@string/network_refresh&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/RelativeLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果要显示viewstub中的内容，可以通过setVisibility或者inflate进行加载。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;private View networkErrorView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private void showNetError() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//保证不重复加载&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (networkErrorView != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		networkErrorView.setVisibility(View.VISIBLE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ViewStub stub = (ViewStub)findViewById(R.id.network_error_layout);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	networkErrorView = stub.inflate();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Button networkSetting = (Button)networkErrorView.findViewById(R.id.network_setting);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Button refresh = (Button)findViewById(R.id.network_refresh);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private void showNormal() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (networkErrorView != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		networkErrorView.setVisibility(View.GONE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;###减少不必要的infalte&lt;br&gt;1.对于inflate的布局可以直接缓存，用全部变量代替局部变量，避免下次需再次inflate&lt;br&gt;2.ListView提供了item缓存，adapter getView的标准写法，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public View getView(int position, View convertView, ViewGroup parent) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ViewHolder holder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (convertView == null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		convertView = inflater.inflate(R.layout.list_item, null);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		holder = new ViewHolder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		convertView.setTag(holder);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		holder = (ViewHolder)convertView.getTag();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * ViewHolder&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @author trinea@trinea.cn 2013-08-01&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private static class ViewHolder &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ImageView appIcon;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	TextView  appName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	TextView  appInfo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;决定伟大水平和一般水平的关键因素，既不是天赋，也不是经验，而是刻意练习的程度。&lt;/strong&gt;从下一页面开始，希望大家都能按照这些标准去写，刻意练习，熟能生巧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;AndroidUI优化之布局优化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="性能优化" scheme="http://yoursite.com/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="布局优化" scheme="http://yoursite.com/tags/%E5%B8%83%E5%B1%80%E4%BC%98%E5%8C%96/"/>
    
      <category term="include" scheme="http://yoursite.com/tags/include/"/>
    
      <category term="merge" scheme="http://yoursite.com/tags/merge/"/>
    
      <category term="viewstub" scheme="http://yoursite.com/tags/viewstub/"/>
    
  </entry>
  
  <entry>
    <title>Android加载长图那些事</title>
    <link href="http://yoursite.com/2016/03/18/Android%E5%8A%A0%E8%BD%BD%E9%95%BF%E5%9B%BE%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://yoursite.com/2016/03/18/Android加载长图那些事/</id>
    <published>2016-03-18T06:52:00.000Z</published>
    <updated>2016-05-07T04:35:20.627Z</updated>
    
    <content type="html">&lt;p&gt;Android加载大图。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
首先我们来创建两个角色，大神A和菜鸟B。&lt;br&gt;B：“A神，快来帮我看个问题，太奇怪了。为难死宝宝了0.0”&lt;br&gt;A：“怎么了，说来听听”&lt;br&gt;B：“是这样的，我的一个页面需要加载一张背景图。图的高度和屏幕高度相同，但是宽度是屏幕宽度的5倍，然后我把它放到一个HorizontalScrollView中，想通过可滑动来展示全这张图片。结果屏幕白茫茫一片，什么都不显示，也没报错，我都哭了。”&lt;br&gt;A：“先别急，你觉得可能是哪方面问题呢”&lt;br&gt;B：“&lt;strong&gt;我觉得可能是两方面的问题：1.图片质量太大；2.图片太长&lt;/strong&gt;”&lt;br&gt;A：“那你有没有试着弄清楚到底是哪里的问题呢？”&lt;br&gt;B：“试了，我又试着&lt;strong&gt;加载了一张长宽都小于手机尺寸的5M大小的图（长图2.5M），结果可以完全显示。&lt;/strong&gt;，然后又去找了一些关于加载长图的资料，但还是没弄明白。”&lt;br&gt;A：“嗯，你的思路大概是对的。是这样的，&lt;strong&gt;在Android中，解析图片时，当图片高度或宽度超过阀值时，会解析失败。&lt;/strong&gt;你可以去看一下&lt;strong&gt;BitmapRegionDecoder&lt;/strong&gt;，说不定会有什么发现哦。”&lt;br&gt;接下来，是B同学的整理。&lt;br&gt;###场景&lt;br&gt;对于图片加载有一种这样的情况，就是单个图片非常巨大，并且还不允许压缩。比如显示：世界地图、微博长图等。首先不压缩，按照原图尺寸加载，那么屏幕肯定是不够大的，并且考虑到内存的情况，不可能一次性整图加载到内存中，所以肯定是局部加载。这就需要用到Api提供的这个类：BitmapRegionDecoder。&lt;br&gt;###BitmapRegionDecoder&lt;br&gt;我们来看一下官方的介绍：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BitmapRegionDecoder can be used to decode a rectangle region from an image. BitmapRegionDecoder is particularly useful when an original image is large and you only need parts of the image.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;To create a BitmapRegionDecoder, call newInstance(...). Given a BitmapRegionDecoder, users can call decodeRegion() repeatedly to get a decoded Bitmap of the specified region.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;BitmapRegionDecoder主要用于显示图片的某一块矩形区域，如果你需要显示某个图片的指定区域，或者你需要显示一张非常大的图片，那么这个类非常合适。我们可以调用newInstance(…)方法来获得一个BitmapRegionDecoder对象，然后调用decodeRegion()方法就可以获得指定位置的图片了。&lt;/strong&gt;&lt;br&gt;接下来看一个简单的例子&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package oracleen.decoder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import android.app.Activity;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import android.graphics.Bitmap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import android.graphics.BitmapFactory;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import android.graphics.BitmapRegionDecoder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import android.graphics.Rect;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import android.os.Bundle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import android.widget.ImageView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.io.IOException;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.io.InputStream;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class MainActivity extends Activity &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private ImageView decoder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected void onCreate(Bundle savedInstanceState) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setContentView(R.layout.activity_main);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        decoder = (ImageView) findViewById(R.id.decoder);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            InputStream inputStreamF = getAssets().open(&amp;quot;datu.png&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //获得图片的宽、高&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            BitmapFactory.Options tmpOptions = new BitmapFactory.Options();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            tmpOptions.inJustDecodeBounds = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            BitmapFactory.decodeStream(inputStreamF, null, tmpOptions);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            int width = tmpOptions.outWidth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            int height = tmpOptions.outHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            InputStream inputStreamS = getAssets().open(&amp;quot;datu.png&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //设置显示图片的中心区域&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            BitmapRegionDecoder bitmapRegionDecoder = BitmapRegionDecoder.newInstance(inputStreamS, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            BitmapFactory.Options options = new BitmapFactory.Options();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            options.inPreferredConfig = Bitmap.Config.RGB_565;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Bitmap bitmap = bitmapRegionDecoder.decodeRegion(new Rect(0, 0, width / 2, height), options);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            decoder.setImageBitmap(bitmap);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; catch (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里我们截取了一个高度等于大图高度，长度等于大图长度一般的图片。&lt;/p&gt;
&lt;p&gt;这里注意一下，有时候会抛&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Throws&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IOException if the image format is not supported or can not be decoded.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个异常，这里需要重新初始化一下我们的输入流，保证它是初始的可读状态。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160318151945160&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;###小B的总结&lt;br&gt;对于小B的问题有两种解决办法：&lt;br&gt;1.把原始的长图切成5张小图，分别设置给5个ImageView，这样每个imageview加载的图都不会超出阈值。&lt;br&gt;但是问题是整张图会全部加载出来，可能会出现OOM。&lt;br&gt;2.重写HorizontalScrollView，根据左右滑动的距离用BitmapRegionDecoder去分区域显示。&lt;br&gt;3.自定义view，在view内部用BitmapRegionDecoder去分区域显示。然后对外提供一个设置图片资源的方法。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/lmj623565791/article/details/49300989&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/lmj623565791/article/details/49300989&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/graphics/BitmapRegionDecoder.html#newInstance%28java.io.InputStream,%20boolean%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/reference/android/graphics/BitmapRegionDecoder.html#newInstance%28java.io.InputStream,%20boolean%29&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Android加载大图。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="Bitmap" scheme="http://yoursite.com/categories/Bitmap/"/>
    
    
      <category term="BitmapRegionDecoder" scheme="http://yoursite.com/tags/BitmapRegionDecoder/"/>
    
      <category term="Bitmap" scheme="http://yoursite.com/tags/Bitmap/"/>
    
      <category term="大图加载" scheme="http://yoursite.com/tags/%E5%A4%A7%E5%9B%BE%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Androd自定义控件（三）飞翔的小火箭</title>
    <link href="http://yoursite.com/2016/03/14/Androd%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%EF%BC%88%E4%B8%89%EF%BC%89%E9%A3%9E%E7%BF%94%E7%9A%84%E5%B0%8F%E7%81%AB%E7%AE%AD/"/>
    <id>http://yoursite.com/2016/03/14/Androd自定义控件（三）飞翔的小火箭/</id>
    <published>2016-03-14T10:11:00.000Z</published>
    <updated>2016-05-06T14:25:40.909Z</updated>
    
    <content type="html">&lt;p&gt;Android自定义控件之组合控件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在前面的&lt;a href=&quot;http://blog.csdn.net/sdkfjksf/article/details/50762249&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;自定义控件概述&lt;/a&gt;中已经跟大家分享了Android开发当中自定义控件的种类。今天跟大家分享一个非主流的组合控件。&lt;br&gt;我们在开发当中，难免需要在不同的场合中重复使用一些控件的组合。而Java的最高目标呢，是消灭所有重复代码。这个时候怎么办呢？办法之一就是&lt;strong&gt;创建一个囊括逻辑和布局的视图，以便可以重复使用而不用在不同的场合中写重复的代码。代码复用的同时我们还把逻辑包装到了控件内部，做到更好的解耦。&lt;/strong&gt;比如我们App页面中的顶栏等等。&lt;br&gt;今天呢，跟大家分享一个我前一阵子在项目中遇到的实例。先看下效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160315104048941&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;###需求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;该控件可以左右滑动。&lt;/li&gt;
&lt;li&gt;底部积分是一个等差数列，可以自己定义。积分初始为半透明，小红旗下方显示设定的最大值。小火箭会飞到当前用户对应的积分位置，用户得到的积分在小火箭动画之后会显示为白色，同时当前积分位置出现一条标识线。&lt;/li&gt;
&lt;li&gt;动画开始的时候小火箭会从0开始移动，直到当前积分位置，在移动过程中小火箭会有一个喷射火焰的效果。&lt;/li&gt;
&lt;li&gt;背景会随着火箭的移动而移动，当动画结束的时候，保证小火箭在屏幕中心。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;###实现方式：&lt;br&gt;自己写一个类继承HorizontalScrollView，HorizontalScrollView会帮我们处理左右滑动的事件，否则还要重写ontouchEvent自己处理滑动。然后加载一个布局文件，给小火箭加一个帧动画和位移属性动画，实现小火箭的移动和喷火动画。同时自定义一个动画，来处理控件本身的滑动。&lt;/p&gt;
&lt;p&gt;###需要的技能点：&lt;br&gt;1.Android的view动画和属性动画，以及简单的自定义动画。&lt;br&gt;2.view的绘制流程，详情参照&lt;a href=&quot;http://blog.csdn.net/sdkfjksf/article/details/50762249&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Androd自定义控件（一）概述 &lt;/a&gt;。&lt;br&gt;3.Activity中view的加载机制。&lt;br&gt;4.Android中dp，px等单位的概念。&lt;br&gt;5.用代码创建控件。&lt;br&gt;6.LayoutParams的使用方法。&lt;/p&gt;
&lt;p&gt;###具体实现：&lt;br&gt;初始化，在这里我们让一个参数的构造方法调用两个参数的构造方法，两个参数的构造方法调用三个参数的构造方法，把初始化的方法放到三个参数的构造方法当中。在初始化方法中加载布局文件。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public PointView(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this(context, null);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public PointView(Context context, AttributeSet attrs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this(context, attrs, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public PointView(Context context, AttributeSet attrs, int defStyleAttr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super(context, attrs, defStyleAttr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        LayoutInflater.from(context).inflate(R.layout.point_view, this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        initView();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.context = context;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bottomLeftMargin = UIUtil.dip2px(context, 65);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private void initView() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //顶部内容区域&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        content = (FrameLayout) findViewById(R.id.point_content);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rocket = (ImageView) findViewById(R.id.point_rocket);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //底部标注&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        one = (TextView) findViewById(R.id.point_one);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        two = (TextView) findViewById(R.id.point_two);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        three = (TextView) findViewById(R.id.point_three);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        four = (TextView) findViewById(R.id.point_four);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        five = (TextView) findViewById(R.id.point_five);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        six = (TextView) findViewById(R.id.point_six);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        seven = (TextView) findViewById(R.id.point_seven);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pointMax = (TextView) findViewById(R.id.point_max);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mark = (LinearLayout) findViewById(R.id.point_mark);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bottom = (FrameLayout) findViewById(R.id.point_bottom);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;布局文件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;212&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;213&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;214&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;215&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;216&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;217&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;218&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;219&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;220&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;221&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;222&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;223&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;224&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;225&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;226&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;227&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;228&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;229&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;230&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;231&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;232&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;233&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;234&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;235&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;236&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;237&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;238&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;239&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;240&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;241&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;242&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;243&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;244&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;245&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;246&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;247&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;248&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;249&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;250&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;251&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;252&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;253&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;254&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;255&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;256&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;257&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;258&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;259&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;260&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;261&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;262&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;263&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;264&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;265&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;266&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;267&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;268&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;269&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;270&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;271&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;272&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;273&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;274&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;275&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;276&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;277&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;278&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;279&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;HorizontalScrollView xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:scrollbars=&amp;quot;none&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;LinearLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:background=&amp;quot;@mipmap/point_view_bg&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:orientation=&amp;quot;vertical&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;!-- 内容区域 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;FrameLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:id=&amp;quot;@+id/point_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:layout_height=&amp;quot;0dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:layout_weight=&amp;quot;1&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;ImageView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                android:id=&amp;quot;@+id/point_rocket&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                android:layout_width=&amp;quot;80dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                android:layout_marginLeft=&amp;quot;15dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                android:layout_marginTop=&amp;quot;85dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                android:src=&amp;quot;@mipmap/rocket_four&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/FrameLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;!-- 底部标注 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;FrameLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:id=&amp;quot;@+id/point_bottom&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:layout_height=&amp;quot;57dp&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;LinearLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                android:layout_height=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                android:orientation=&amp;quot;horizontal&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;TextView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    android:layout_width=&amp;quot;30dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    android:layout_marginLeft=&amp;quot;10dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    android:layout_marginTop=&amp;quot;7dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    android:text=&amp;quot;积分&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    android:textColor=&amp;quot;#fff&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    android:textSize=&amp;quot;14sp&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;LinearLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    android:id=&amp;quot;@+id/point_mark&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    android:layout_width=&amp;quot;0dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    android:layout_weight=&amp;quot;1&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;LinearLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:layout_width=&amp;quot;0dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:layout_weight=&amp;quot;1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:orientation=&amp;quot;vertical&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;lt;LinearLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:layout_width=&amp;quot;50dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:layout_height=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:gravity=&amp;quot;center_horizontal&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:orientation=&amp;quot;vertical&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;lt;ImageView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_width=&amp;quot;1px&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_height=&amp;quot;5dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:background=&amp;quot;@color/light_red&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;lt;TextView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:id=&amp;quot;@+id/point_one&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_width=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_marginTop=&amp;quot;3dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:text=&amp;quot;0&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:textColor=&amp;quot;@color/white&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:textSize=&amp;quot;12sp&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;LinearLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:layout_width=&amp;quot;0dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:layout_weight=&amp;quot;1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:orientation=&amp;quot;vertical&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;lt;LinearLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:layout_width=&amp;quot;50dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:layout_height=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:gravity=&amp;quot;center_horizontal&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:orientation=&amp;quot;vertical&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;lt;ImageView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_width=&amp;quot;1px&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_height=&amp;quot;5dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:background=&amp;quot;@color/light_red&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;lt;TextView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:id=&amp;quot;@+id/point_two&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_width=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_marginTop=&amp;quot;3dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:text=&amp;quot;300&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:textColor=&amp;quot;@color/zhuce&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:textSize=&amp;quot;12sp&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;LinearLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:layout_width=&amp;quot;0dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:layout_weight=&amp;quot;1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:orientation=&amp;quot;vertical&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;lt;LinearLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:layout_width=&amp;quot;50dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:layout_height=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:gravity=&amp;quot;center_horizontal&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:orientation=&amp;quot;vertical&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;lt;ImageView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_width=&amp;quot;1px&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_height=&amp;quot;5dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:background=&amp;quot;@color/light_red&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;lt;TextView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:id=&amp;quot;@+id/point_three&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_width=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_marginTop=&amp;quot;3dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:text=&amp;quot;600&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:textColor=&amp;quot;@color/zhuce&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:textSize=&amp;quot;12sp&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;LinearLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:layout_width=&amp;quot;0dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:layout_weight=&amp;quot;1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:orientation=&amp;quot;vertical&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;lt;LinearLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:layout_width=&amp;quot;50dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:layout_height=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:gravity=&amp;quot;center_horizontal&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:orientation=&amp;quot;vertical&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;lt;ImageView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_width=&amp;quot;1px&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_height=&amp;quot;5dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:background=&amp;quot;@color/light_red&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;lt;TextView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:id=&amp;quot;@+id/point_four&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_width=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_marginTop=&amp;quot;3dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:text=&amp;quot;900&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:textColor=&amp;quot;@color/zhuce&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:textSize=&amp;quot;12sp&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;LinearLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:layout_width=&amp;quot;0dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:layout_weight=&amp;quot;1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:orientation=&amp;quot;vertical&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;lt;LinearLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:layout_width=&amp;quot;50dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:layout_height=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:gravity=&amp;quot;center_horizontal&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:orientation=&amp;quot;vertical&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;lt;ImageView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_width=&amp;quot;1px&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_height=&amp;quot;5dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:background=&amp;quot;@color/light_red&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;lt;TextView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:id=&amp;quot;@+id/point_five&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_width=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_marginTop=&amp;quot;3dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:text=&amp;quot;1200&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:textColor=&amp;quot;@color/zhuce&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:textSize=&amp;quot;12sp&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;LinearLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:layout_width=&amp;quot;0dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:layout_weight=&amp;quot;1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:orientation=&amp;quot;vertical&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;lt;LinearLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:layout_width=&amp;quot;50dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:layout_height=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:gravity=&amp;quot;center_horizontal&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:orientation=&amp;quot;vertical&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;lt;ImageView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_width=&amp;quot;1px&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_height=&amp;quot;5dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:background=&amp;quot;@color/light_red&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;lt;TextView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:id=&amp;quot;@+id/point_six&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_width=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_marginTop=&amp;quot;3dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:text=&amp;quot;1500&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:textColor=&amp;quot;@color/zhuce&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:textSize=&amp;quot;12sp&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;LinearLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:layout_width=&amp;quot;0dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:layout_weight=&amp;quot;1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android:orientation=&amp;quot;vertical&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;lt;LinearLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:layout_width=&amp;quot;50dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:layout_height=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:gravity=&amp;quot;center_horizontal&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            android:orientation=&amp;quot;vertical&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;lt;ImageView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_width=&amp;quot;1px&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_height=&amp;quot;5dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:background=&amp;quot;@color/light_red&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;lt;TextView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:id=&amp;quot;@+id/point_seven&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_width=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:layout_marginTop=&amp;quot;3dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:text=&amp;quot;1800&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:textColor=&amp;quot;@color/zhuce&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                android:textSize=&amp;quot;12sp&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;TextView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    android:id=&amp;quot;@+id/point_max&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    android:layout_width=&amp;quot;58dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    android:layout_marginLeft=&amp;quot;10dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    android:layout_marginTop=&amp;quot;7dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    android:gravity=&amp;quot;center&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    android:textColor=&amp;quot;@color/zhuce&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    android:textSize=&amp;quot;12sp&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;View&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    android:layout_width=&amp;quot;33dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    android:layout_height=&amp;quot;match_parent&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/FrameLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/HorizontalScrollView&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在onlayout方法中拿到我们需要的底部标注的长度，用来计算小火箭和view动画的位移。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected void onLayout(boolean changed, int l, int t, int r, int b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.onLayout(changed, l, t, r, b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        markLength = mark.getMeasuredWidth();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//        L.e(TAG, &amp;quot;markLength---&amp;quot; + markLength);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;设置显示标注线&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 设置当前分数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param point&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void setCurrentPoint(int point) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int location;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (point &amp;lt; MAX_POINT) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            location = (int) ((point / MAX_POINT) * markLength + bottomLeftMargin);//算出当前分数显示位置的偏移量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            location = markLength + bottomLeftMargin + UIUtil.dip2px(context, 12);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //标注当前位置,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ImageView line = new ImageView(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        line.setImageDrawable(getResources().getDrawable(R.color.point_line));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bottom.addView(line);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        LayoutParams linePa = (LayoutParams) line.getLayoutParams();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        linePa.leftMargin = location;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        linePa.width = UIUtil.dip2px(context, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        linePa.height = UIUtil.dip2px(context, 58);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        line.setLayoutParams(linePa);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//        L.e(TAG, &amp;quot;location---&amp;quot; + location + &amp;quot;;bottomLeftMargin---&amp;quot; + bottomLeftMargin);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;火箭的动画&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//火箭平移动画&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ObjectAnimator rocketAni = ObjectAnimator.ofFloat(rocket, &amp;quot;translationX&amp;quot;, rocketX);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DecelerateInterpolator interpolator = new DecelerateInterpolator();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rocketAni.setInterpolator(interpolator);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rocketAni.setDuration(DEFAULT_DURATION);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rocketAni.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //火箭切换动画&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rocket.setImageResource(R.drawable.rocket_frame);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final AnimationDrawable animationDrawable = (AnimationDrawable) rocket.getDrawable();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        animationDrawable.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rocketAni.addListener(new AnimatorListenerAdapter() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            public void onAnimationEnd(Animator animation) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                super.onAnimationEnd(animation);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //停止帧动画&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                animationDrawable.stop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                rocket.setImageResource(R.mipmap.rocket_three);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //设置当前积分标注线&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                setCurrentPoint(point);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //设置已经到达积分为白色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                setMarkColor(point, 300);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为scroller自带的滚动插值器与火箭动画插值器不同步,所以使用自定义动画实现控件的平滑滚动&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 自定义动画,控制scrollview滚动&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public class ViewAnimation extends Animation &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        private int viewX;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public ViewAnimation(int viewX) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            this.viewX = viewX;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        protected void applyTransformation(float interpolatedTime, Transformation t) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            super.applyTransformation(interpolatedTime, t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            smoothScrollTo((int) (viewX * interpolatedTime), 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //view滚动动画&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         * scroller自带的滚动插值器与火箭动画插值器不同步,所以使用自定义动画实现平滑滚动&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ViewAnimation viewAnimation = new ViewAnimation(finalViewX);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        viewAnimation.setDuration(DEFAULT_DURATION);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        viewAnimation.setInterpolator(interpolator);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.setAnimation(viewAnimation);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        viewAnimation.start();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;调用&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void onWindowFocusChanged(boolean hasFocus) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.onWindowFocusChanged(hasFocus);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mPoinView.setMaxPoint(2500);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mPoinView.startAni(600);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里我们在onWindowFocusChanged回调中调用，保证在控件加载完成之后再设置参数。&lt;/p&gt;
&lt;p&gt;到这里这个控件就基本完成了。其实还有很多可以优化的地方，比如把一些属性抽离出来，写成自定义属性，还有下标根据传入数组动态生成等等，有兴趣的朋友可以交流一下。&lt;a href=&quot;http://download.csdn.net/detail/sdkfjksf/9461542&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源码地址。&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Android自定义控件之组合控件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="自定义控件" scheme="http://yoursite.com/categories/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
    
      <category term="自定义控件" scheme="http://yoursite.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
      <category term="组合控件" scheme="http://yoursite.com/tags/%E7%BB%84%E5%90%88%E6%8E%A7%E4%BB%B6/"/>
    
      <category term="自定义动画" scheme="http://yoursite.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>那些年大家都在谈论的Android性能优化</title>
    <link href="http://yoursite.com/2016/03/09/%E9%82%A3%E4%BA%9B%E5%B9%B4%E5%A4%A7%E5%AE%B6%E9%83%BD%E5%9C%A8%E8%B0%88%E8%AE%BA%E7%9A%84Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2016/03/09/那些年大家都在谈论的Android性能优化/</id>
    <published>2016-03-09T14:07:00.000Z</published>
    <updated>2016-05-07T04:50:24.607Z</updated>
    
    <content type="html">&lt;p&gt;Android性能优化概述。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
Android性能优化似乎是一个老生常谈的问题，但我似乎只是一个新生。我不能像老生那样告诉你N多的优化方法。从去年毕业一直到现在，大大小小的项目也写了三个了。第一个是实习的时候自己一个人搞的，服务器带客户端。然后后两个是毕业后来新公司和一个同事一起搞的，已经上线了，也都在更新维护。&lt;br&gt;那我也来谈谈如何进行优化？好像并不能。老板需要的是速成，优化有卵用，还不如在大更一个版本。但事实好像并不是这样的，用户铺天盖地的反馈都证明了这样做出来的app体验不好。写这篇博客我所想做的和我要说明的是，&lt;strong&gt;作为一个不是老生的新生，我们该怎么去在性能优化的道路上摸索前进。&lt;/strong&gt;&lt;br&gt;###WHAT?什么是性能问题？&lt;br&gt;在性能测试中存在两个概念：&lt;br&gt;####(1). 响应时间&lt;br&gt;指从用户操作开始到系统给用户以正确反馈的时间。一般包括逻辑处理时间 + 网络传输时间 + 展现时间。对于非网络类应用不包括网络传输时间。&lt;br&gt;展现时间即网页或 App 界面渲染时间。&lt;br&gt;响应时间是用户对性能最直接的感受。&lt;br&gt;####(2). TPS(Transaction Per Second)&lt;br&gt;TPS为每秒处理的事务数，是系统吞吐量的指标，在搜索系统中也用QPS(Query Per Second)衡量。TPS一般与响应时间反相关。&lt;br&gt;通常所说的性能问题就是指响应时间过长、系统吞吐量过低。&lt;br&gt;对后台开发来说，也常将高并发下内存泄漏归为性能问题。&lt;br&gt;对移动开发来说，性能问题还包括电量、内存使用这两类较特殊情况。&lt;br&gt;###HOW?怎样去进行性能优化？&lt;br&gt;明白了何为性能问题之后，就能明白性能优化实际就是优化系统的响应时间，提高TPS。优化响应时间，提高TPS。方式不外乎这三大类：&lt;br&gt;####(1) 降低执行时间&lt;br&gt;又包括几小类&lt;br&gt;#####a. 利用多线程并发或分布式提高 TPS&lt;br&gt;#####b. 缓存(包括对象缓存、IO 缓存、网络缓存等)&lt;br&gt;#####c. 数据结构和算法优化&lt;br&gt;#####d. 性能更优的底层接口调用，如 JNI 实现&lt;br&gt;#####e. 逻辑优化&lt;br&gt;#####f. 需求优化&lt;br&gt;####(2) 同步改异步，利用多线程提高TPS&lt;br&gt;####(3) 提前或延迟操作，错峰提高TPS&lt;br&gt;###WHERE?Android中的性能问题常出现在哪里？&lt;br&gt;####(1)UI中的性能问题&lt;br&gt;#####a.布局&lt;br&gt;#####b.绘制&lt;br&gt;####(2)内存中的性能问题&lt;br&gt;#####a.内存泄露&lt;br&gt;#####b.响应速度&lt;br&gt;#####c.listview&lt;br&gt;#####d.OOM&lt;br&gt;#####e.对象的内存占用过大以及不能重复利用&lt;br&gt;#####f.bitmap加载&lt;br&gt;####(3)关于电量的性能问题&lt;br&gt;####(4)关于网络的性能问题&lt;br&gt;###纳尼？&lt;br&gt;其实这些都是那些老生总结过的经验，虽然有些拿来主义，但是凭我现在的水平好像也总结不出花来。那要这篇博客何用？不急不急，这只是开胃菜而已。在以后的博客当中，我会就Android中经常出现性能问题，去一步一步提升我做过的项目的性能。&lt;br&gt;&lt;strong&gt;其实每个人都在成为大神的路上，只不过有的人在走，而有的人在跑。不急不躁，脚踏实地，我们也可以————致不是老生的新生&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Android性能优化概述。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="性能优化" scheme="http://yoursite.com/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="性能优化概述" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%A6%82%E8%BF%B0/"/>
    
      <category term="性能优化关键点" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%85%B3%E9%94%AE%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>自定义view你需要知道的</title>
    <link href="http://yoursite.com/2016/03/08/%E8%87%AA%E5%AE%9A%E4%B9%89view%E4%BD%A0%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84/"/>
    <id>http://yoursite.com/2016/03/08/自定义view你需要知道的/</id>
    <published>2016-03-08T03:31:00.000Z</published>
    <updated>2016-05-07T04:53:47.292Z</updated>
    
    <content type="html">&lt;p&gt;自定义view的时候可能需要重写的方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
前面我已经跟大家分享了&lt;a href=&quot;http://blog.csdn.net/sdkfjksf/article/details/50762249&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;自定义view概述&lt;/a&gt;，今天跟大家分享一下官方文档中关于自定义view可能重写到的方法。&lt;a href=&quot;http://developer.android.com/reference/android/view/View.html#&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;&lt;br&gt;###概述&lt;br&gt;实现自定义view，我们通常会去重写一些系统会在所有view中调用到的标准方法。事实上，我们不用重写所有的方法，甚至只重写onDraw(android.graphics.Canvas)方法就可以了。&lt;br&gt;###创建&lt;br&gt;####构造方法&lt;br&gt;构造方法有两种形式，一种是在view在代码中创建的时候调用，另一种是view从布局文件中加载的时候调用。第二种方式需要去解析在布局文件中定义的属性。&lt;br&gt;####onFinishInflate()&lt;br&gt;回调方法，当view和他的子view已经从布局文件中加载完成的时候调用。&lt;br&gt;###布局&lt;br&gt;####onMeasure(int, int)&lt;br&gt;用来计算并且确定此view和他的子view需要的尺寸。&lt;br&gt;####onLayout(boolean, int, int, int, int)&lt;br&gt;当这个view需要分配他的子view的位置和占用空间的时候调用。&lt;br&gt;####onSizeChanged(int, int, int, int)&lt;br&gt;当这个view的尺寸已经发生改变的时候调用。&lt;br&gt;###绘制&lt;br&gt;####onDraw(android.graphics.Canvas)&lt;br&gt;当view需要渲染他的内容的时候调用。&lt;br&gt;###事件处理&lt;br&gt;####onKeyDown(int, KeyEvent)&lt;br&gt;当按下某个按键的时候触发，比如返回键。&lt;br&gt;####onKeyUp(int, KeyEvent)&lt;br&gt;当离开按键的时候触发。&lt;br&gt;####onTrackballEvent(MotionEvent)&lt;br&gt;当发生轨迹球事件时触发。&lt;br&gt;####onTouchEvent(MotionEvent)&lt;br&gt;发生触屏事件的时候触发。&lt;br&gt;###焦点&lt;br&gt;####onFocusChanged(boolean, int, android.graphics.Rect)&lt;br&gt;当view获得或者失去焦点时触发。&lt;br&gt;####onWindowFocusChanged(boolean)&lt;br&gt;当包含这个view的window得到或者失去焦点时触发。&lt;br&gt;###依附&lt;br&gt;####onAttachedToWindow()&lt;br&gt;当这个view依附到window中时触发。&lt;br&gt;####onDetachedFromWindow()&lt;br&gt;当这个view从依附的window中分离时触发。&lt;br&gt;####onWindowVisibilityChanged(int)&lt;br&gt;当包含该view的window的可见性发生改变时触发的方法。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;自定义view的时候可能需要重写的方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="自定义控件" scheme="http://yoursite.com/categories/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
    
      <category term="自定义控件" scheme="http://yoursite.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
      <category term="官方文档" scheme="http://yoursite.com/tags/%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/"/>
    
      <category term="重写" scheme="http://yoursite.com/tags/%E9%87%8D%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>Androd自定义控件（二）自定义类继承view</title>
    <link href="http://yoursite.com/2016/03/06/Androd%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E7%BB%A7%E6%89%BFview/"/>
    <id>http://yoursite.com/2016/03/06/Androd自定义控件（二）自定义类继承view/</id>
    <published>2016-03-06T14:54:00.000Z</published>
    <updated>2016-05-07T04:28:46.936Z</updated>
    
    <content type="html">&lt;p&gt;在自定义控件（一）中呢，大家已经对自定义控件有了一个基本的认识，今天就和大家分享一下如何自定义类继承view来实现我们的功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在自定义控件（一）中呢，大家已经对自定义控件有了一个基本的认识，今天就和大家分享一下如何自定义类继承view来实现我们的功能。&lt;/p&gt;
&lt;p&gt;###需求&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160306215538224&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;br&gt;效果图如上图所示，要求如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;背景颜色从上到下由深变浅。&lt;/li&gt;
&lt;li&gt;小黄点的数量从上到下由多到少。&lt;/li&gt;
&lt;li&gt;小黄点的颜色大小随机。&lt;/li&gt;
&lt;li&gt;该控件可分为5个等级，最佳为背景全白，没有小黄点。最严重为颜色最深，小黄点最多。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt; &lt;strong&gt;好，需求就是这个样子。看到这里呢，希望小伙伴们先不要着急往下看，可以设身处地的想一想，如果是自己做的话，要怎样实现。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;###实现方案&lt;br&gt;接下来跟大家分享一下我的实现方案。看到这个需求我想到的方案有两个。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把每一颗牙齿作为一个单位，我们去控制单个牙齿的背景色和小黄点的数量。然后绘制出四颗牙齿，按顺序摆放。优点是可以比较精确的控制每颗牙齿的显示情况。缺点是每颗牙齿都要去绘制，需要自己去用画笔滑出牙齿的轮廓，背景和小黄点。&lt;/li&gt;
&lt;li&gt;把四颗牙齿作为一个单位，分成上下两层。上层是一张中间透明，两边是白色的图片。下层是一个从上到下颜色由深到钱，小黄点由少到多的自定义view。通过绘制不同的背景层，显示我们要的效果。优点是只需要绘制背景即可实现我们要的功能，不需要去分别绘制每颗牙齿的轮廓。鉴于我们的需求，不需要精确到每颗牙齿，这里我们选择第二种实现方案。&lt;br&gt;###具体实现&lt;br&gt;我们先梳理一下第二种实现方式需要用到的知识点&lt;br&gt;#####1.自定义类继承view实现自定义控件的步骤。&lt;br&gt;#####2.如何去测量控件的大小。&lt;br&gt;#####3.画笔的使用。&lt;br&gt;好，接下来我们来按步骤实现这个控件。&lt;br&gt;####初始化&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 定义两种模式,平均和渐变&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public enum MODE &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        AVERAGE, SHADE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public Chart(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        init();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public Chart(Context context, AttributeSet attrs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super(context, attrs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        init();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public Chart(Context context, AttributeSet attrs, int defStyleAttr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super(context, attrs, defStyleAttr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        init();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private void init() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mPaint = new Paint();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mPaint.setAntiAlias(true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        random = new Random();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        isNull = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        isBig = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        deltaX = 20;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        deltaY = 30;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bgAlpha = 50;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sizeY = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        floatY = 10;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        de = 3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mode = MODE.AVERAGE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了让小黄点从上到下由少到多的显示，我是这样实现的，随机生成一个0-20的初始Y轴坐标，然后绘制每列的小黄点。小黄点的间距是逐渐减小的，这样小黄点就会越来越密集。而X的坐标是一个初始值加上一个随机值，这样绘制出来的小黄点每两列间距也是随机的。显示效果会比较好看。&lt;br&gt;在初始化的方法里，我们初始化了一些x轴和y轴的初始数据。同时我定义了两种模式，一种是小黄点均匀分布，两一种是逐渐增多。&lt;/p&gt;
&lt;p&gt;####测量&lt;br&gt;系统帮我们测量的高度和宽度都是MATCH_PARNET，当我们设置明确的宽度和高度时，系统帮我们测量的结果就是我们设置的结果，当我们设置为WRAP_CONTENT,或者MATCH_PARENT系统帮我们测量的结果就是MATCH_PARENT的长度。&lt;br&gt;所以，当设置了WRAP_CONTENT时，我们需要自己进行测量，即重写onMesure方法”：&lt;/p&gt;
&lt;p&gt;重写之前先了解MeasureSpec的specMode,一共三种类型：&lt;/p&gt;
&lt;p&gt;EXACTLY：一般是设置了明确的值或者是MATCH_PARENT&lt;/p&gt;
&lt;p&gt;AT_MOST：表示子布局限制在一个最大值内，一般为WARP_CONTENT&lt;/p&gt;
&lt;p&gt;UNSPECIFIED：表示子布局想要多大就多大，很少使用&lt;/p&gt;
&lt;p&gt;下面是测量的方法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setMeasuredDimension(getMeasuredLength(widthMeasureSpec, true, this), getMeasuredLength(heightMeasureSpec, false, this));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 根据布局模式计算宽高&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param measureSpec&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param isWidth&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @return&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static int getMeasuredLength(int measureSpec, boolean isWidth, View view) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int specMode = View.MeasureSpec.getMode(measureSpec);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int specSize = View.MeasureSpec.getSize(measureSpec);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (specMode == View.MeasureSpec.EXACTLY) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            result = specSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (isWidth) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                result = view.getPaddingLeft() + view.getPaddingRight();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                result = view.getPaddingTop() + view.getPaddingBottom();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (specMode == View.MeasureSpec.AT_MOST) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                result = Math.min(result, specSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;####绘制&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected void onDraw(Canvas canvas) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //isNull为true,背景为纯白色,不显示牙菌斑&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (isNull) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //填充背景颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mPaint.setColor(0xffffffff);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            canvas.drawRect(0, 0, getMeasuredWidth(), getMeasuredHeight(), mPaint);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //填充背景颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mPaint.setColor(0xffFEF8ED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //绘制点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//        int canvasWidth = canvas.getWidth();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            int canvasHeight = canvas.getHeight();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            LinearGradient lg = new LinearGradient(0, 0, 0, canvasHeight, 0x7ff1b351, 0xfff1b351, Shader.TileMode.MIRROR);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mPaint.setShader(lg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mPaint.setAlpha(bgAlpha);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            canvas.drawRect(0, 0, getMeasuredWidth(), getMeasuredHeight(), mPaint);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            int x = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //绘制Cap为ROUND的点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mPaint.setStrokeCap(Paint.Cap.ROUND);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            switch (mode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                case AVERAGE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    for (int i = 0; i &amp;lt; 80; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        int startX = deltaX + random.nextInt(10);//x每次增加的距离&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        int startY = 0 + random.nextInt(floatY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        x = x + startX;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        int y = startY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        for (int j = 0; j &amp;lt; 80; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            int alpha = 70 + random.nextInt(100);//随机生成透明度的点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            int size = 5 + random.nextInt(5);//设置线宽，如果不设置线宽，无法绘制点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            mPaint.setStrokeWidth(size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            mPaint.setAlpha(alpha);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            mPaint.setShader(null);//清空渐变色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            canvas.drawPoint(x, y + deltaY, mPaint);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            y = y + deltaY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                case SHADE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    for (int i = 0; i &amp;lt; 80; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        int startX = deltaX + random.nextInt(10);//x每次增加的距离&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        int startY = 0 + random.nextInt(floatY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        x = x + startX;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        int deltay = deltaY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        int y = startY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        boolean isFirst = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//                    Log.e(TAG, &amp;quot;&amp;quot; + startY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        for (int j = 0; j &amp;lt; 80; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            int alpha = 70 + random.nextInt(100);//随机生成透明度的点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            int size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            if (isBig) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                size = (int) ((5 + random.nextInt(10)) * de / 3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                size = (int) ((3 + random.nextInt(7)) * de / 3);//设置线宽，如果不设置线宽，无法绘制点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            mPaint.setStrokeWidth(size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            mPaint.setAlpha(alpha);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            if (deltay &amp;lt; 15) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                deltay = 20;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            if (isFirst) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                canvas.drawPoint(x, y, mPaint);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                isFirst = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                canvas.drawPoint(x, y + deltay, mPaint);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                y = y + deltay;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            deltay -= sizeY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这里，我们给先给画笔设置一个线性随机色，绘制背景。&lt;br&gt;然后设置设置画笔粗细为随机，透明度随机，来绘制小黄点。为了使小黄点在不同分辨率上显示出相同的效果，它的像素值我们来根据手机的分辨率去计算。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public int getDis(Activity activity) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		DisplayMetrics metric = new DisplayMetrics();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		activity.getWindowManager().getDefaultDisplay().getMetrics(metric);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		int width = metric.widthPixels; // 屏幕宽度（像素）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		int height = metric.heightPixels; // 屏幕高度（像素）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		float density = metric.density; // 屏幕密度（0.75 / 1.0 / 1.5 / 2.0）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		int densityDpi = metric.densityDpi; // 屏幕密度DPI（120 / 160 / 240 / 320）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (density &amp;lt; 1.0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			return -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; else if (density == 1.0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; else if (density == 1.5) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			return 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			return 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;####引用&lt;br&gt;到这里这个控件基本上就写完了，然后我们需要给外部提供一个方法，去设置这个控件的不同状态。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 根据不同的时间,显示不同的背景(小图)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void setChartLittele(int time, float de) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.de = de;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (time &amp;gt;= 400) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            setBg(true, 0, 0, 0, 0, 0, Chart.MODE.SHADE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else if (time &amp;gt;= 320 &amp;amp;&amp;amp; time &amp;lt; 400) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            setBg(false, 26, 36, 1, 20, 10, Chart.MODE.SHADE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else if (time &amp;gt;= 240 &amp;amp;&amp;amp; time &amp;lt; 320) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            setBg(false, 22, 32, 1, 20, 20, Chart.MODE.SHADE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else if (time &amp;gt;= 160 &amp;amp;&amp;amp; time &amp;lt; 240) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            setBg(false, 18, 28, 1, 20, 30, Chart.MODE.SHADE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else if (time &amp;gt;= 80 &amp;amp;&amp;amp; time &amp;lt; 160) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            setBg(false, 14, 24, 1, 20, 40, Chart.MODE.SHADE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else if (time &amp;gt;= 0 &amp;amp;&amp;amp; time &amp;lt; 80) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            setBg(false, 10, 20, 1, 20, 50, Chart.MODE.SHADE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 设置背景牙菌斑的密集程度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param deltaX  x轴每次往后移动的距离(随机)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param deltaY  y轴每次往下移动的距离&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param sizeY   渐变模式y每次减少的距离&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param floatY  Y轴开始的随机坐标&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param bgAlpha 背景渐变色的透明度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param mode    模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void setBg(boolean isNull, int deltaX, int deltaY, int sizeY, int floatY, int bgAlpha, MODE mode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.isNull = isNull;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.deltaX = deltaX;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.deltaY = deltaY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.sizeY = sizeY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.floatY = floatY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.bgAlpha = bgAlpha;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.mode = mode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        invalidate();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看一下布局文件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xmlns:tools=&amp;quot;http://schemas.android.com/tools&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_height=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:background=&amp;quot;#fff&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:gravity=&amp;quot;center&amp;quot; &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;FrameLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&amp;quot;115dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&amp;quot;115dp&amp;quot; &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;com.oracleen.view.Chart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:id=&amp;quot;@+id/chart&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:layout_height=&amp;quot;match_parent&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;ImageView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:layout_height=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:background=&amp;quot;@drawable/check_right_second&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/FrameLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里我们用了一个framelayout，上层是一张镂空的图片，下层是我们绘制的背景。&lt;br&gt;然后在activity中设置背景的显示级别。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;chart = (Chart) findViewById(R.id.chart);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chart.setChartLittele(300, getDis(this));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;OK，搞定。demo链接。&lt;br&gt;&lt;a href=&quot;http://download.csdn.net/detail/sdkfjksf/9454156&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下一章我会和大家分享一下组合view的实现，把今天实现的view和前景图片做成一个控件，添加一些属性，使用起来会更方便一些。&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在自定义控件（一）中呢，大家已经对自定义控件有了一个基本的认识，今天就和大家分享一下如何自定义类继承view来实现我们的功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="自定义控件" scheme="http://yoursite.com/categories/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
    
      <category term="自定义控件" scheme="http://yoursite.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
      <category term="View" scheme="http://yoursite.com/tags/View/"/>
    
      <category term="绘制" scheme="http://yoursite.com/tags/%E7%BB%98%E5%88%B6/"/>
    
      <category term="paint" scheme="http://yoursite.com/tags/paint/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio1.5中NDK开发</title>
    <link href="http://yoursite.com/2016/03/03/Android%20Studio1.5%E4%B8%ADNDK%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2016/03/03/Android Studio1.5中NDK开发/</id>
    <published>2016-03-03T08:08:00.000Z</published>
    <updated>2016-05-07T04:33:12.290Z</updated>
    
    <content type="html">&lt;p&gt;Android中NDK的配置和使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;strong&gt;从Android Studio1.3以后，在Android 环境开发JNI程序搭建开发环境变得相对简单。这里就来介绍一下基于Android Studio如何进行jni开发。在介绍之前，先跟大家说一下JNI和NDK都是什么，方便大家理解。&lt;/strong&gt;&lt;br&gt;###NDK和JNI的关系&lt;br&gt;JNI是java语言提供的Java和C/C++相互沟通的机制，Java可以通过JNI调用本地的C/C++代码，本地的C/C++的代码也可以 调用java代码。JNI 是本地编程接口，Java和C/C++互相通过的接口。Java通过C/C++使用本地的代码的一个关键性原因在于C/C++代码的高效性。&lt;pre&gt;&lt;code&gt;NDK是一系列工具的集合。它提供了一系列的工具，帮助开发者快速开发C（或C++）的动态库，并能自动将so和java应用一起打包成apk。这 些工具对开发者的帮助是巨大的。它集成了交叉编译器，并提供了相应的mk文件隔离CPU、平台、ABI等差异，开发人员只需要简单修改mk文件（指出“哪 些文件需要编译”、“编译特性要求”等），就可以创建出so。它可以自动地将so和Java应用一起打包，极大地减轻了开发人员的打包工作。
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;然后跟大家说一下环境的搭建&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;###环境说明:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IDE:Android Studio 1.5&lt;/li&gt;
&lt;li&gt;JDK: 1.7.0_67&lt;/li&gt;
&lt;li&gt;Gradle:2.8&lt;/li&gt;
&lt;li&gt;SDK with Build Tools at least version 23.0.2&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;使用Android-Studio内置的SDK管理器下载NDK。&quot;&gt;&lt;a href=&quot;#使用Android-Studio内置的SDK管理器下载NDK。&quot; class=&quot;headerlink&quot; title=&quot;使用Android Studio内置的SDK管理器下载NDK。&quot;&gt;&lt;/a&gt;使用Android Studio内置的SDK管理器下载NDK。&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160303162830512&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;###对NDK进行关联&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160303165009836&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160303164947236&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里也可以去修改工程下的local.properties&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;## This file is automatically generated by Android Studio.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Do not modify this file -- YOUR CHANGES WILL BE ERASED!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# This file must *NOT* be checked into Version Control Systems,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# as it contains information specific to your local configuration.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Location of the SDK. This is only used by Gradle.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# For customization when using a Version Control System, please read the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# header note.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#Thu Mar 03 11:29:37 CST 2016&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ndk.dir=C\:\\software\\sdk\\ndk-bundle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sdk.dir=C\:\\software\\sdk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;###设置gradle&lt;br&gt;设置好NDK之后，开始设置gradle，设置gradle主要需要设置三个地方，设置好之后就可以直接编写和编译JNI代码了，不需要像以前一样编写Makefile，相当方便。但是设置gradle也是需要比较小心的，由于当前NDK还处于Experimental 阶段，更新不断，经常会爆出各种奇怪的错误，因此也要特别留心。好了废话不多说，下面来介绍设置gradle的三个主要步骤。&lt;/p&gt;
&lt;p&gt;首先设置TopLevel gradle，也就是Project gradle，这里比较简单。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Top-level build file where you can add configuration options common to all sub-projects/modules.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;buildscript &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        jcenter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//        classpath &amp;apos;com.android.tools.build:gradle:1.5.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        classpath &amp;apos;com.android.tools.build:gradle-experimental:0.4.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // NOTE: Do not place your application dependencies here; they belong&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // in the individual module build.gradle files&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;allprojects &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        jcenter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task clean(type: Delete) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    delete rootProject.buildDir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还要多提一句的是，这里设置的是gradle-experimental:0.4.0，后面对应设置gradle wrapper的时候要对应gradle2.8-all 版本，这里先说到这里。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#Wed Oct 21 11:34:03 PDT 2015&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;distributionBase=GRADLE_USER_HOME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;distributionPath=wrapper/dists&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zipStoreBase=GRADLE_USER_HOME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zipStorePath=wrapper/dists&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;distributionUrl=https\://services.gradle.org/distributions/gradle-2.8-all.zip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接着设置 Module gradle，这一步是比较麻烦的。由于我们在创建工程的时候自动生成的这个gradle文件内容比较多，而且如果要使用NDK的话这个gradle变化比较大，这里直接贴出需要使用NDK的gradle，然后来进行说明。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apply plugin: &amp;apos;com.android.model.application&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;model &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        compileSdkVersion = 23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        buildToolsVersion = &amp;quot;23.0.2&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        defaultConfig.with &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            applicationId = &amp;quot;com.oracleen.rl.easyar&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            minSdkVersion.apiLevel = 15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            targetSdkVersion.apiLevel = 23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            versionCode = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            versionName = &amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android.ndk &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        moduleName = &amp;quot;HelloARVideoNative&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cppFlags.add(&amp;quot;-I$&amp;#123;file(&amp;quot;../../package/include&amp;quot;)&amp;#125;&amp;quot;.toString())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cppFlags.add(&amp;quot;-DANDROID&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cppFlags.add(&amp;quot;-fexceptions&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cppFlags.add(&amp;quot;-frtti&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stl = &amp;quot;gnustl_static&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ldLibs.add(&amp;quot;log&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ldLibs.add(&amp;quot;GLESv2&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android.buildTypes &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        release &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            minifyEnabled = false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            proguardFiles.add(file(&amp;quot;proguard-rules.pro&amp;quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android.productFlavors &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        create(&amp;quot;arm&amp;quot;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ndk.with &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                abiFilters.add(&amp;quot;armeabi-v7a&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android.sources &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        main &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            jni &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    library file(&amp;quot;../../package/Android/libs/armeabi-v7a/libEasyAR.so&amp;quot;) abi &amp;quot;armeabi-v7a&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //    compile fileTree(dir: &amp;apos;libs&amp;apos;, include: [&amp;apos;*.jar&amp;apos;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    testCompile &amp;apos;junit:junit:4.12&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;apos;com.android.support:appcompat-v7:23.0.1&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile fileTree(dir: &amp;apos;../../package/Android/libs&amp;apos;, include: [&amp;apos;*.jar&amp;apos;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;和自动生成的gradle相比，首先是 apply plugin: ‘com.android.application’ 变成了 apply plugin: ‘com.android.model.application’。下面的配置也需要包装在model{}中。&lt;/p&gt;
&lt;p&gt;这个gradle的配置有几点需要注意的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有值的设置都要写成 xxx = yyyy的形式，比如： applicationId = “com.oracleen.rl.easyar” ，否则会报这种错误：&lt;strong&gt;Error:Cause: org.gradle.api.internal.ExtensibleDynamicObject&lt;/strong&gt;， 当出现此类错误，检查是否都用了 “=”的方式。&lt;/li&gt;
&lt;li&gt;buildTypes 需要从android{} 中取出来，写成android.buildTypes{}的形式，否则会出现这种错误：&lt;strong&gt;Error:Unable to load class ‘org.gradle.nativeplatform.internal.DefaultBuildType_Decorated’&lt;/strong&gt;.  内容也需要改为上边文件中的格式，否则会报这种错误：&lt;strong&gt;Error:No signature of method: org.gradle.model.ModelMap.minifyEnabled() is applicable for argument types: (java.lang.Boolean) values: [false]&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;defaultConfig{} 需要写成defaultConfig.with{} 的形式，否则会报这种错误：&lt;strong&gt;Error:Cause: com.android.build.gradle.managed.AndroidConfig_Impl&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在defaultConfig.with{} 中 需要写成上边格式，也就是比自动生成的多 .apiLevel ，否则会报这种错误：&lt;strong&gt;Unable to load class com.android.build.gradle.managed.ProductFlavor_Impl&lt;/strong&gt;　&lt;/li&gt;
&lt;li&gt;最后一点，在gradleWrapper中使用的是2.5，则android.ndk {} 中类似cppFlags 的添加使用 += 的方式，否则需要使用 .add的方式&lt;/li&gt;
&lt;li&gt;引用的其他model构建方式也要包装在model{}当中。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;NDK开发主要有两中情况：一种是使用已经编译好的.so动态库；一种是使用c/c++源代码开发。我会分别介绍。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;###编译c/c++源代码开发&lt;br&gt;这里我们起一个名字是“HelloARVideoNative”的JNI库，androidstudio会把我们编写的c/c++代码编译成这个名字的.so文件。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android.ndk &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        moduleName = &amp;quot;HelloARVideoNative&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stl = &amp;quot;gnustl_static&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ldLibs.add(&amp;quot;log&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ldLibs.add(&amp;quot;GLESv2&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后我们在我们需要使用c/c++方法的类中引用库，并且声明本地接口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160303175518780&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后就可以去c/c++文件中去实现我们的方法了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160303175655450&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;###使用已经编译好的.so动态库&lt;br&gt;在app下的gradle中做如下配置&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android.sources &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       main &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           jni &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   library file(&amp;quot;../../package/Android/libs/armeabi-v7a/libEasyAR.so&amp;quot;) abi &amp;quot;armeabi-v7a&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;指向我们的so库文件位置，然后在需要引用的地方&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;static &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.loadLibrary(&amp;quot;EasyAR&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们就可以使用so库中的方法了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160303181554629&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最后，附上相关的资源.其实在android的官网已经提供了很完善的教程了.还有github上也托管了sample代码.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Experimental Plugin User Guide: &lt;a href=&quot;http://tools.android.com/tech-docs/new-build-system/gradle-experimental&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://tools.android.com/tech-docs/new-build-system/gradle-experimental&lt;/a&gt;&lt;br&gt;github sample:  &lt;a href=&quot;https://github.com/googlesamples/android-ndk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/googlesamples/android-ndk&lt;/a&gt;&lt;br&gt;官方ndk视频教程: &lt;a href=&quot;https://youtu.be/okLKfxfbz40&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://youtu.be/okLKfxfbz40&lt;/a&gt; (需要翻墙)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Android中NDK的配置和使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="NDK" scheme="http://yoursite.com/categories/NDK/"/>
    
    
      <category term="NDK" scheme="http://yoursite.com/tags/NDK/"/>
    
      <category term="JNI" scheme="http://yoursite.com/tags/JNI/"/>
    
      <category term="AndroidStudio1.5" scheme="http://yoursite.com/tags/AndroidStudio1-5/"/>
    
  </entry>
  
  <entry>
    <title>N个非常有用的Android程序片段（持续更新）</title>
    <link href="http://yoursite.com/2016/02/29/N%E4%B8%AA%E9%9D%9E%E5%B8%B8%E6%9C%89%E7%94%A8%E7%9A%84Android%E7%A8%8B%E5%BA%8F%E7%89%87%E6%AE%B5%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
    <id>http://yoursite.com/2016/02/29/N个非常有用的Android程序片段（持续更新）/</id>
    <published>2016-02-29T14:05:00.000Z</published>
    <updated>2016-05-07T04:48:19.468Z</updated>
    
    <content type="html">&lt;p&gt;Android常用代码片段汇总。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
###1.判断网络是否已经连接&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// check all network connect, WIFI or mobile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static boolean isNetworkAvailable(final Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    boolean hasWifoCon = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    boolean hasMobileCon = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ConnectivityManager cm = (ConnectivityManager) context.getSystemService(context.CONNECTIVITY_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NetworkInfo[] netInfos = cm.getAllNetworkInfo();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for (NetworkInfo net : netInfos) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String type = net.getTypeName();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (type.equalsIgnoreCase(&amp;quot;WIFI&amp;quot;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            LevelLogUtils.getInstance().i(tag, &amp;quot;get Wifi connection&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (net.isConnected()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                hasWifoCon = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (type.equalsIgnoreCase(&amp;quot;MOBILE&amp;quot;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            LevelLogUtils.getInstance().i(tag, &amp;quot;get Mobile connection&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (net.isConnected()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                hasMobileCon = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return hasWifoCon || hasMobileCon;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;###2.Android的Px与Dp转化工具类&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class DensityUtils &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static int Dp2Px(Context context, float dp) &amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final float scale = context.getResources().getDisplayMetrics().density;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return (int) (dp * scale + 0.5f);   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static int Px2Dp(Context context, float px) &amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final float scale = context.getResources().getDisplayMetrics().density;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return (int) (px / scale + 0.5f);   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;###3.Android获得WIFI IP地址或者手机网络IP&lt;br&gt;有的时候我们需要获得WIFI的IP地址获得手机网络的IP地址，这是一个工具类，专门解决这个问题，这里需要两个权限： &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;uses-permission android:name=&amp;quot;android.permission.ACCESS_WIFI_STATE&amp;quot; &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/uses-permission&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;uses-permission android:name=&amp;quot;android.permission.INTERNET&amp;quot; &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/uses-permission&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一个权限是获得WIFI的IP地址需要使用的，第二个权限是获得移动网络的IP需要使用的，代码如下： &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class GetIPAddressUtil &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static String getWifiIP(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String ip = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        WifiManager wifiManager = (WifiManager) context&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .getSystemService(Context.WIFI_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (wifiManager.isWifiEnabled()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            WifiInfo wifiInfo = wifiManager.getConnectionInfo();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            int i = wifiInfo.getIpAddress();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ip = (i &amp;amp; 0xFF) + &amp;quot;.&amp;quot; + ((i &amp;gt;&amp;gt; 8) &amp;amp; 0xFF) + &amp;quot;.&amp;quot; + ((i &amp;gt;&amp;gt; 16) &amp;amp; 0xFF)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    + &amp;quot;.&amp;quot; + (i &amp;gt;&amp;gt; 24 &amp;amp; 0xFF);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return ip;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static String getMobileIP() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            for (Enumeration&amp;lt;NetworkInterface&amp;gt; en = NetworkInterface&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    .getNetworkInterfaces(); en.hasMoreElements();) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                NetworkInterface intf = en.nextElement();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                for (Enumeration&amp;lt;InetAddress&amp;gt; enumIpAddr = intf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        .getInetAddresses(); enumIpAddr.hasMoreElements();) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    InetAddress inetAddress = enumIpAddr.nextElement();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    if (!inetAddress.isLoopbackAddress()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        return inetAddress.getHostAddress().toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; catch (SocketException ex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Log.e(&amp;quot;哎呀，出错了...&amp;quot;, ex.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;###4.唤醒屏幕并解锁 &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static void wakeUpAndUnlock(Context context)&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        KeyguardManager km= (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        KeyguardManager.KeyguardLock kl = km.newKeyguardLock(&amp;quot;unLock&amp;quot;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //解锁  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        kl.disableKeyguard();  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //获取电源管理器对象  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        PowerManager pm=(PowerManager) context.getSystemService(Context.POWER_SERVICE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //获取PowerManager.WakeLock对象,后面的参数|表示同时传入两个值,最后的是LogCat里用的Tag  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.ACQUIRE_CAUSES_WAKEUP | PowerManager.SCREEN_DIM_WAKE_LOCK,&amp;quot;bright&amp;quot;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //点亮屏幕  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        wl.acquire();  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //释放  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        wl.release();  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要添加权限 &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;uses-permission android:name=&amp;quot;android.permission.WAKE_LOCK&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;uses-permission android:name=&amp;quot;android.permission.DISABLE_KEYGUARD&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;###5.判断当前App处于前台还是后台状态 &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static boolean isApplicationBackground(final Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ActivityManager am = (ActivityManager) context&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .getSystemService(Context.ACTIVITY_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @SuppressWarnings(&amp;quot;deprecation&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;ActivityManager.RunningTaskInfo&amp;gt; tasks = am.getRunningTasks(1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (!tasks.isEmpty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ComponentName topActivity = tasks.get(0).topActivity;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (!topActivity.getPackageName().equals(context.getPackageName())) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要添加权限&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;uses-permission&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     android:name=&amp;quot;android.permission.GET_TASKS&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;###6.安装APK &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static void installApk(Context context, File file) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Intent intent = new Intent();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    intent.setAction(&amp;quot;android.intent.action.VIEW&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    intent.addCategory(&amp;quot;android.intent.category.DEFAULT&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    intent.setType(&amp;quot;application/vnd.android.package-archive&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    intent.setDataAndType(Uri.fromFile(file),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;quot;application/vnd.android.package-archive&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    context.startActivity(intent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;###7.获取当前设备宽高，单位px &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@SuppressWarnings(&amp;quot;deprecation&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static int getDeviceWidth(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    WindowManager manager = (WindowManager) context&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .getSystemService(Context.WINDOW_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return manager.getDefaultDisplay().getWidth();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@SuppressWarnings(&amp;quot;deprecation&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static int getDeviceHeight(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    WindowManager manager = (WindowManager) context&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .getSystemService(Context.WINDOW_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return manager.getDefaultDisplay().getHeight();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;###8.获取当前设备的MAC地址 &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static String getMacAddress(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String macAddress;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    WifiManager wifi = (WifiManager) context&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .getSystemService(Context.WIFI_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    WifiInfo info = wifi.getConnectionInfo();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    macAddress = info.getMacAddress();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (null == macAddress) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return &amp;quot;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    macAddress = macAddress.replace(&amp;quot;:&amp;quot;, &amp;quot;&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return macAddress;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;###9.获取当前程序的版本号 &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static String getAppVersion(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String version = &amp;quot;0&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        version = context.getPackageManager().getPackageInfo(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                context.getPackageName(), 0).versionName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; catch (PackageManager.NameNotFoundException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return version;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;###10.返回移动网络运营商的名字&lt;br&gt;(例：中国联通、中国移动、中国电信) 仅当用户已在网络注册时有效, CDMA 可能会无效) &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static String getNetworkOperatorName(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TelephonyManager telephonyManager = (TelephonyManager) context&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .getSystemService(Context.TELEPHONY_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return telephonyManager.getNetworkOperatorName();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;###11.手机号码正则 &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static final String REG_PHONE_CHINA = &amp;quot;^((13[0-9])|(15[^4,\\D])|(18[0,5-9]))\\d&amp;#123;8&amp;#125;$&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;###12.邮箱正则 &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static final String REG_EMAIL = &amp;quot;\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;###13.通过资源文件名获取资源id&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static int getResource(Context c, String imageName) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return c.getResources().getIdentifier(imageName, &amp;quot;mipmap&amp;quot;, c.getPackageName());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;###14.获取方法执行时间&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;long startTime=System.currentTimeMillis();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//执行方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long endTime=System.currentTimeMillis();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;float excTime=(float)(endTime-startTime)/1000;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&amp;quot;执行时间：&amp;quot;+excTime+&amp;quot;s&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Android常用代码片段汇总。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="代码片段" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    
    
      <category term="代码片段" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    
  </entry>
  
  <entry>
    <title>Androd自定义控件（一）概述</title>
    <link href="http://yoursite.com/2016/02/28/Androd%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%EF%BC%88%E4%B8%80%EF%BC%89%E6%A6%82%E8%BF%B0/"/>
    <id>http://yoursite.com/2016/02/28/Androd自定义控件（一）概述/</id>
    <published>2016-02-28T14:35:00.000Z</published>
    <updated>2016-05-07T05:00:15.303Z</updated>
    
    <content type="html">&lt;p&gt;这篇博客的主要内容是： 1.什么是控件，以及自定义控件。 2.自定义控件的种类。 3.view的工作原理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
这篇博客的主要内容是：&lt;br&gt;1.什么是控件，以及自定义控件。&lt;br&gt;2.自定义控件的种类。&lt;br&gt;3.view的工作原理。&lt;br&gt;#What?什么是自定义控件&lt;br&gt;##1.什么是view&lt;br&gt;在Android的官方文档中是这样描述的：这个类表示了用户界面的基本构建模块。一个View占用了屏幕上的一个矩形区域并且负责界面绘制和事件处理。View是用来构建用户界面组件（Button，Textfields等等）的基类。ViewGroup子类是各种布局的基类，它是个包含其他View（或其他ViewGroups）和定义这些View布局参数的容器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实说白了，View是Android最基本的UI组件，表示屏幕上的一个矩形区域。&lt;/p&gt;
&lt;p&gt;##2.什么是自定义view&lt;br&gt;Android开发中难免用到Android标准控件库中没有的，或者不完全符合我们需求的控件，这时候就需要我们根据自己的需求来定义满足我们要求的控件，即自定义控件。&lt;/p&gt;
&lt;p&gt;#How?怎样去自定义一个控件。&lt;/p&gt;
&lt;p&gt;##1.自定义控件的种类&lt;br&gt;个人认为自定义view其实可以分为4种：&lt;br&gt;1.系统控件重新组合+动画（非必须）&lt;br&gt;2.自定义类继承view或者已有的控件类+动画（非必须）&lt;br&gt;3.自定义类继承viewgroup或者已有的容器类+动画（非必须）&lt;br&gt;4.自定义类继承surfaceview+动画（非必须）&lt;br&gt;其中第一种比较简单，这里就不过多叙述了。&lt;br&gt;第2,3种的步骤大概是类似的，即测量（onmeasere），布局（onlayout），绘制（ondraw）。他们的共同点是：都需要进行测量操作。不同点是：viewgroup主要是控制子view的摆放，所以必须实现onlayout。而view没有子view，所以不需要onlayout方法，但必须实现ondraw。这里还需要说明的一点是自定义viewgroup一般不需要实现onmeasure，我们可以让我们的自定义view继承自已有的viewgroup帮我们实现onmeasure。&lt;br&gt;第四种多为相机，播放器以及一些需要频繁刷新的view（粒子效果等等）。&lt;/p&gt;
&lt;p&gt;##2.view的工作原理&lt;br&gt;View定义了绘图的基本操，由三个函数完成：measure()、layout()、draw()，其内部又分别包含了onMeasure()、onLayout()、onDraw()三个子方法。具体操作如下：&lt;br&gt;1、measure操作&lt;br&gt;measure操作主要用于计算视图的大小，即视图的宽度和长度。在view中定义为final类型，要求子类不能修改。measure()函数中又会调用下面的函数：&lt;br&gt;（1）onMeasure()，视图大小的将在这里最终确定，也就是说measure只是对onMeasure的一个包装，子类可以覆写onMeasure()方法实现自己的计算视图大小的方式，并通过setMeasuredDimension(width, height)保存计算结果。&lt;br&gt;2、layout操作&lt;br&gt;layout操作用于设置视图在屏幕中显示的位置。在view中定义为final类型，要求子类不能修改。layout()函数中有两个基本操作：&lt;br&gt;（1）setFrame（l,t,r,b），l,t,r,b即子视图在父视图中的具体位置，该函数用于将这些参数保存起来；&lt;br&gt;（2）onLayout()，在View中这个函数什么都不会做，提供该函数主要是为viewGroup类型布局子视图用的；&lt;br&gt;3、draw操作&lt;br&gt;draw操作利用前两部得到的参数，将视图显示在屏幕上，到这里也就完成了整个的视图绘制工作。子类也不应该修改该方法，因为其内部定义了绘图的基本操作：&lt;br&gt;（1）绘制背景；&lt;br&gt;（2）如果要视图显示渐变框，这里会做一些准备工作；&lt;br&gt;（3）绘制视图本身，即调用onDraw()函数。在view中onDraw()是个空函数，也就是说具体的视图都要覆写该函数来实现自己的显示（比如TextView在这里实现了绘制文字的过程）。而对于ViewGroup则不需要实现该函数，因为作为容器是“没有内容“的，其包含了多个子view，而子View已经实现了自己的绘制方法，因此只需要告诉子view绘制自己就可以了，也就是下面的dispatchDraw()方法;&lt;br&gt;（4）绘制子视图，即dispatchDraw()函数。在view中这是个空函数，具体的视图不需要实现该方法，它是专门为容器类准备的，也就是容器类必须实现该方法；&lt;br&gt;（5）如果需要（应用程序调用了setVerticalFadingEdge或者setHorizontalFadingEdge），开始绘制渐变框；&lt;br&gt;（6）绘制滚动条；&lt;br&gt;ViewGroup中的扩展操作：&lt;br&gt;首先Viewgroup是一个抽象类。&lt;br&gt;1、对子视图的measure过程&lt;br&gt;（1）measureChildren()，内部使用一个for循环对子视图进行遍历，分别调用子视图的measure()方法；&lt;br&gt;（2）measureChild()，为指定的子视图measure，会被 measureChildren调用；&lt;br&gt;（3）measureChildWithMargins()，为指定子视图考虑了margin和padding的measure；&lt;br&gt;以上三个方法是ViewGroup提供的3个对子view进行测量的参考方法，设计者需要在实际中首先覆写onMeasure()，之后再对子view进行遍历measure，这时候就可以使用以上三个方法，当然也可以自定义方法进行遍历。&lt;br&gt;2、对子视图的layout过程&lt;br&gt;在ViewGroup中onLayout()被定义为abstract类型，也就是具体的容器必须实现此方法来安排子视图的布局位置，实现中主要考虑的是视图的大小及视图间的相对位置关系，如gravity、layout_gravity。&lt;br&gt;3、对子视图的draw过程&lt;br&gt;（1）dispatchDraw()，该方法用于对子视图进行遍历然后分别让子视图分别draw，方法内部会首先处理布局动画（也就是说布局动画是在这里处理的），如果有布局动画则会为每个子视图产生一个绘制时间，之后再有一个for循环对子视图进行遍历，来调用子视图的draw方法（实际为下边的drawChild()）；&lt;br&gt;（2）drawChild()，该方法用于具体调用子视图的draw方法，内部首先会处理视图动画（也就是说视图动画是在这里处理的），之后调用子视图的draw()。&lt;br&gt;从以上分析可以看出View树的绘制是一个递归的过程，从ViewGroup一直向下遍历，直到所有的子view都完成绘制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这篇博客主要是对view以及自定义view的概述，接下来我会结合我在项目中用到的实例来跟大家分享四种自定义view的特点及操作方式。&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇博客的主要内容是： 1.什么是控件，以及自定义控件。 2.自定义控件的种类。 3.view的工作原理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="自定义控件" scheme="http://yoursite.com/categories/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
    
      <category term="自定义控件" scheme="http://yoursite.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
      <category term="View的工作原理" scheme="http://yoursite.com/tags/View%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
</feed>
